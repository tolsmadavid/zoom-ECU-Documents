
DAC_SignalsGeneration2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d14  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001eec  08001eec  00011eec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f04  08001f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f08  08001f08  00011f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08001f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000154  20000084  08001f90  00020084  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001d8  08001f90  000201d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000b682  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000111f4  00000000  00000000  0002b736  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026b0  00000000  00000000  0003c92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000be8  00000000  00000000  0003efe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000f776f  00000000  00000000  0003fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e08  00000000  00000000  00137338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007c85  00000000  00000000  00138140  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002596e  00000000  00000000  0013fdc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00165733  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002144  00000000  00000000  001657b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000084 	.word	0x20000084
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001ed4 	.word	0x08001ed4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000088 	.word	0x20000088
 8000214:	08001ed4 	.word	0x08001ed4

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	; (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	; (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	; (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000242:	f000 fac5 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f001 fe19 	bl	8001e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 f855 	bl	80002f8 <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800025c:	08001f0c 	.word	0x08001f0c
  ldr r2, =_sbss
 8000260:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000264:	200001d8 	.word	0x200001d8

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 
  /* Change the wave */
  ubKeyPressed = SET;
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <HAL_GPIO_EXTI_Callback+0x8>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
}
 8000272:	4770      	bx	lr
 8000274:	200000a0 	.word	0x200000a0

08000278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000278:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Error if LED2 is slowly blinking (1 sec. period) */
  while(1)
  {    
    BSP_LED_Toggle(LED2); 
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fa55 	bl	800072a <BSP_LED_Toggle>
    HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f000 faf8 	bl	8000878 <HAL_Delay>
 8000288:	e7f7      	b.n	800027a <Error_Handler+0x2>

0800028a <SystemClock_Config>:
{
 800028a:	b500      	push	{lr}
 800028c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	2238      	movs	r2, #56	; 0x38
 8000290:	2100      	movs	r1, #0
 8000292:	a806      	add	r0, sp, #24
 8000294:	f001 fe16 	bl	8001ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	2214      	movs	r2, #20
 800029a:	2100      	movs	r1, #0
 800029c:	a801      	add	r0, sp, #4
 800029e:	f001 fe11 	bl	8001ec4 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002a6:	f001 f897 	bl	80013d8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2240      	movs	r2, #64	; 0x40
 80002ac:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 75;
 80002b0:	2004      	movs	r0, #4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 75;
 80002b6:	224b      	movs	r2, #75	; 0x4b
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 75;
 80002ba:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f001 f8de 	bl	800148c <HAL_RCC_OscConfig>
 80002d0:	b108      	cbz	r0, 80002d6 <SystemClock_Config+0x4c>
    Error_Handler();
 80002d2:	f7ff ffd1 	bl	8000278 <Error_Handler>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	220f      	movs	r2, #15
 80002d8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80002e0:	2107      	movs	r1, #7
 80002e2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80002e8:	f001 fb1a 	bl	8001920 <HAL_RCC_ClockConfig>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1f0      	bne.n	80002d2 <SystemClock_Config+0x48>
}
 80002f0:	b015      	add	sp, #84	; 0x54
 80002f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080002f8 <main>:
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 80002fc:	f000 fa9a 	bl	8000834 <HAL_Init>
  SystemClock_Config();
 8000300:	f7ff ffc3 	bl	800028a <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b96      	ldr	r3, [pc, #600]	; (8000560 <main+0x268>)
  hdac1.Instance = DAC1;
 8000306:	4c97      	ldr	r4, [pc, #604]	; (8000564 <main+0x26c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800030a:	f042 0201 	orr.w	r2, r2, #1
 800030e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000310:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000312:	f002 0201 	and.w	r2, r2, #1
 8000316:	9205      	str	r2, [sp, #20]
 8000318:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800031a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800031c:	f042 0204 	orr.w	r2, r2, #4
 8000320:	649a      	str	r2, [r3, #72]	; 0x48
 8000322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000324:	f002 0204 	and.w	r2, r2, #4
 8000328:	9203      	str	r2, [sp, #12]
 800032a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800032c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800032e:	f042 0201 	orr.w	r2, r2, #1
 8000332:	649a      	str	r2, [r3, #72]	; 0x48
 8000334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000336:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000338:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800033c:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033e:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000340:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000342:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000344:	f000 fabe 	bl	80008c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000348:	200b      	movs	r0, #11
 800034a:	f000 faef 	bl	800092c <HAL_NVIC_EnableIRQ>
  DAC_ChannelConfTypeDef sConfig = {0};
 800034e:	2230      	movs	r2, #48	; 0x30
 8000350:	2100      	movs	r1, #0
 8000352:	a810      	add	r0, sp, #64	; 0x40
 8000354:	f001 fdb6 	bl	8001ec4 <memset>
  hdac1.Instance = DAC1;
 8000358:	4b83      	ldr	r3, [pc, #524]	; (8000568 <main+0x270>)
 800035a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800035c:	4620      	mov	r0, r4
 800035e:	f000 fb09 	bl	8000974 <HAL_DAC_Init>
 8000362:	4602      	mov	r2, r0
 8000364:	b108      	cbz	r0, 800036a <main+0x72>
      Error_Handler();
 8000366:	f7ff ff87 	bl	8000278 <Error_Handler>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800036a:	2302      	movs	r3, #2
 800036c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.DAC_Trigger2 = DAC_TRIGGER_T6_TRGO;
 800036e:	2112      	movs	r1, #18
 8000370:	231e      	movs	r3, #30
 8000372:	e9cd 1313 	strd	r1, r3, [sp, #76]	; 0x4c
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000376:	2305      	movs	r3, #5
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000378:	e9cd 3016 	strd	r3, r0, [sp, #88]	; 0x58
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800037c:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
  sConfig.DAC_SignedFormat = DISABLE;
 8000380:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000384:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000386:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000388:	a910      	add	r1, sp, #64	; 0x40
 800038a:	4620      	mov	r0, r4
 800038c:	f000 fc08 	bl	8000ba0 <HAL_DAC_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2800      	cmp	r0, #0
 8000394:	d1e7      	bne.n	8000366 <main+0x6e>
  if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0x10000/SAWTOOTH_NB_STEPS) != HAL_OK)
 8000396:	f240 4244 	movw	r2, #1092	; 0x444
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	4601      	mov	r1, r0
 800039e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003a2:	4620      	mov	r0, r4
 80003a4:	f000 fce4 	bl	8000d70 <HAL_DACEx_SawtoothWaveGenerate>
 80003a8:	4602      	mov	r2, r0
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d1db      	bne.n	8000366 <main+0x6e>
  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003ae:	a910      	add	r1, sp, #64	; 0x40
 80003b0:	4620      	mov	r0, r4
 80003b2:	f000 fd22 	bl	8000dfa <HAL_DACEx_SelfCalibrate>
 80003b6:	4606      	mov	r6, r0
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d1d4      	bne.n	8000366 <main+0x6e>
  sDacConfig = sConfig;
 80003bc:	ac10      	add	r4, sp, #64	; 0x40
 80003be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c0:	4d6a      	ldr	r5, [pc, #424]	; (800056c <main+0x274>)
 80003c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  htim2.Instance = TIM2;
 80003cc:	4c68      	ldr	r4, [pc, #416]	; (8000570 <main+0x278>)
  sDacConfig = sConfig;
 80003ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	2210      	movs	r2, #16
 80003d4:	4631      	mov	r1, r6
 80003d6:	a80c      	add	r0, sp, #48	; 0x30
 80003d8:	f001 fd74 	bl	8001ec4 <memset>
  htim2.Init.Prescaler = 149;
 80003dc:	2395      	movs	r3, #149	; 0x95
 80003de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e2:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003e6:	4620      	mov	r0, r4
  htim2.Init.Period = 999;
 80003e8:	f240 33e7 	movw	r3, #999	; 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
 80003f0:	960b      	str	r6, [sp, #44]	; 0x2c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f2:	60a6      	str	r6, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f4:	e9c4 3603 	strd	r3, r6, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f8:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003fa:	f001 fc2d 	bl	8001c58 <HAL_TIM_Base_Init>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d1b1      	bne.n	8000366 <main+0x6e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000406:	a90c      	add	r1, sp, #48	; 0x30
 8000408:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800040c:	f001 fc48 	bl	8001ca0 <HAL_TIM_ConfigClockSource>
 8000410:	2800      	cmp	r0, #0
 8000412:	d1a8      	bne.n	8000366 <main+0x6e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000414:	2620      	movs	r6, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000418:	a909      	add	r1, sp, #36	; 0x24
 800041a:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800041c:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800041e:	f001 fcfb 	bl	8001e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	2800      	cmp	r0, #0
 8000424:	d19f      	bne.n	8000366 <main+0x6e>
  htim6.Instance = TIM6;
 8000426:	4d53      	ldr	r5, [pc, #332]	; (8000574 <main+0x27c>)
 8000428:	4b53      	ldr	r3, [pc, #332]	; (8000578 <main+0x280>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042a:	9008      	str	r0, [sp, #32]
  htim6.Init.Prescaler = 0;
 800042c:	e9c5 3000 	strd	r3, r0, [r5]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000434:	60a8      	str	r0, [r5, #8]
  htim6.Init.Period = 2499;
 8000436:	f640 13c3 	movw	r3, #2499	; 0x9c3
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043a:	61a8      	str	r0, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800043c:	4628      	mov	r0, r5
  htim6.Init.Period = 2499;
 800043e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000440:	f001 fc0a 	bl	8001c58 <HAL_TIM_Base_Init>
 8000444:	2800      	cmp	r0, #0
 8000446:	d18e      	bne.n	8000366 <main+0x6e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800044a:	a906      	add	r1, sp, #24
 800044c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800044e:	9606      	str	r6, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000450:	f001 fce2 	bl	8001e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000454:	4605      	mov	r5, r0
 8000456:	2800      	cmp	r0, #0
 8000458:	d185      	bne.n	8000366 <main+0x6e>
  BSP_LED_Init(LED2);
 800045a:	f000 f939 	bl	80006d0 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800045e:	2101      	movs	r1, #1
 8000460:	4628      	mov	r0, r5
 8000462:	f000 f96b 	bl	800073c <BSP_PB_Init>
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 8000466:	4620      	mov	r0, r4
 8000468:	f001 fb54 	bl	8001b14 <HAL_TIM_Base_Start>
 800046c:	2800      	cmp	r0, #0
 800046e:	f47f af7a 	bne.w	8000366 <main+0x6e>
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 8000472:	4840      	ldr	r0, [pc, #256]	; (8000574 <main+0x27c>)
 8000474:	f001 fb4e 	bl	8001b14 <HAL_TIM_Base_Start>
 8000478:	4601      	mov	r1, r0
 800047a:	2800      	cmp	r0, #0
 800047c:	f47f af73 	bne.w	8000366 <main+0x6e>
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000480:	4838      	ldr	r0, [pc, #224]	; (8000564 <main+0x26c>)
 8000482:	f000 fa8a 	bl	800099a <HAL_DAC_Start>
 8000486:	2800      	cmp	r0, #0
 8000488:	f47f af6d 	bne.w	8000366 <main+0x6e>
    if (ubKeyPressed != RESET)
 800048c:	4e3b      	ldr	r6, [pc, #236]	; (800057c <main+0x284>)
  BSP_LED_On(LED2);
 800048e:	f000 f943 	bl	8000718 <BSP_LED_On>
 8000492:	4635      	mov	r5, r6
  if (HAL_TIM_Base_Stop(&htim2) != HAL_OK)
 8000494:	4627      	mov	r7, r4
    if (ubKeyPressed != RESET)
 8000496:	7833      	ldrb	r3, [r6, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0fc      	beq.n	8000496 <main+0x19e>
      if (ubSelectedWavesForm == DAC_WAVE_SAWTOOTH) ubSelectedWavesForm = DAC_WAVE_SINE;
 800049c:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80004a0:	b9d3      	cbnz	r3, 80004d8 <main+0x1e0>
 80004a2:	2301      	movs	r3, #1
      else ubSelectedWavesForm = DAC_WAVE_SAWTOOTH;
 80004a4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      DAC_ChangeWave(ubSelectedWavesForm);
 80004a8:	f895 4034 	ldrb.w	r4, [r5, #52]	; 0x34
  if (HAL_TIM_Base_Stop(&htim2) != HAL_OK)
 80004ac:	4638      	mov	r0, r7
      DAC_ChangeWave(ubSelectedWavesForm);
 80004ae:	b2e4      	uxtb	r4, r4
  if (HAL_TIM_Base_Stop(&htim2) != HAL_OK)
 80004b0:	f001 fb48 	bl	8001b44 <HAL_TIM_Base_Stop>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	f47f af56 	bne.w	8000366 <main+0x6e>
  if (HAL_TIM_Base_Stop(&htim6) != HAL_OK)
 80004ba:	482e      	ldr	r0, [pc, #184]	; (8000574 <main+0x27c>)
 80004bc:	f001 fb42 	bl	8001b44 <HAL_TIM_Base_Stop>
 80004c0:	4601      	mov	r1, r0
 80004c2:	2800      	cmp	r0, #0
 80004c4:	f47f af4f 	bne.w	8000366 <main+0x6e>
  switch(wave)
 80004c8:	b144      	cbz	r4, 80004dc <main+0x1e4>
 80004ca:	2c01      	cmp	r4, #1
 80004cc:	f47f af4b 	bne.w	8000366 <main+0x6e>
      if (HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 80004d0:	4824      	ldr	r0, [pc, #144]	; (8000564 <main+0x26c>)
 80004d2:	f000 fa92 	bl	80009fa <HAL_DAC_Stop>
 80004d6:	e005      	b.n	80004e4 <main+0x1ec>
      else ubSelectedWavesForm = DAC_WAVE_SAWTOOTH;
 80004d8:	2300      	movs	r3, #0
 80004da:	e7e3      	b.n	80004a4 <main+0x1ac>
      if (HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 80004dc:	4621      	mov	r1, r4
 80004de:	4821      	ldr	r0, [pc, #132]	; (8000564 <main+0x26c>)
 80004e0:	f000 fb14 	bl	8000b0c <HAL_DAC_Stop_DMA>
      if (HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 80004e4:	2800      	cmp	r0, #0
 80004e6:	f47f af3e 	bne.w	8000366 <main+0x6e>
  sDacConfig.DAC_Trigger = sDacConfig.DAC_Trigger2;
 80004ea:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sDacConfig, DAC_CHANNEL_1) != HAL_OK)
 80004ee:	491f      	ldr	r1, [pc, #124]	; (800056c <main+0x274>)
 80004f0:	481c      	ldr	r0, [pc, #112]	; (8000564 <main+0x26c>)
  sDacConfig.DAC_Trigger2 = tmp;
 80004f2:	e9c5 2304 	strd	r2, r3, [r5, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sDacConfig, DAC_CHANNEL_1) != HAL_OK)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f000 fb52 	bl	8000ba0 <HAL_DAC_ConfigChannel>
 80004fc:	4601      	mov	r1, r0
 80004fe:	2800      	cmp	r0, #0
 8000500:	f47f af31 	bne.w	8000366 <main+0x6e>
  switch(wave)
 8000504:	b14c      	cbz	r4, 800051a <main+0x222>
 8000506:	2c01      	cmp	r4, #1
 8000508:	f47f af2d 	bne.w	8000366 <main+0x6e>
      if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 800050c:	9000      	str	r0, [sp, #0]
 800050e:	233c      	movs	r3, #60	; 0x3c
 8000510:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <main+0x288>)
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <main+0x26c>)
 8000514:	f000 fa84 	bl	8000a20 <HAL_DAC_Start_DMA>
 8000518:	e010      	b.n	800053c <main+0x244>
      if (HAL_DACEx_SawtoothWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_SAWTOOTH_POLARITY_INCREMENT, 0, 0x10000/SAWTOOTH_NB_STEPS) != HAL_OK)
 800051a:	f240 4344 	movw	r3, #1092	; 0x444
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000524:	4623      	mov	r3, r4
 8000526:	4621      	mov	r1, r4
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <main+0x26c>)
 800052a:	f000 fc21 	bl	8000d70 <HAL_DACEx_SawtoothWaveGenerate>
 800052e:	2800      	cmp	r0, #0
 8000530:	f47f af19 	bne.w	8000366 <main+0x6e>
      if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
 8000534:	4621      	mov	r1, r4
 8000536:	480b      	ldr	r0, [pc, #44]	; (8000564 <main+0x26c>)
 8000538:	f000 fa2f 	bl	800099a <HAL_DAC_Start>
      if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 800053c:	2800      	cmp	r0, #0
 800053e:	f47f af12 	bne.w	8000366 <main+0x6e>
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 8000542:	4638      	mov	r0, r7
 8000544:	f001 fae6 	bl	8001b14 <HAL_TIM_Base_Start>
 8000548:	2800      	cmp	r0, #0
 800054a:	f47f af0c 	bne.w	8000366 <main+0x6e>
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0x27c>)
 8000550:	f001 fae0 	bl	8001b14 <HAL_TIM_Base_Start>
 8000554:	2800      	cmp	r0, #0
 8000556:	f47f af06 	bne.w	8000366 <main+0x6e>
      ubKeyPressed = RESET;
 800055a:	7028      	strb	r0, [r5, #0]
 800055c:	e79b      	b.n	8000496 <main+0x19e>
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	200000d8 	.word	0x200000d8
 8000568:	50000800 	.word	0x50000800
 800056c:	200000a4 	.word	0x200000a4
 8000570:	2000018c 	.word	0x2000018c
 8000574:	2000014c 	.word	0x2000014c
 8000578:	40001000 	.word	0x40001000
 800057c:	200000a0 	.word	0x200000a0
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <HAL_MspInit+0x38>)
 8000586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000588:	f042 0201 	orr.w	r2, r2, #1
 800058c:	661a      	str	r2, [r3, #96]	; 0x60
 800058e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000590:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	f002 0201 	and.w	r2, r2, #1
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800059c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005a0:	659a      	str	r2, [r3, #88]	; 0x58
 80005a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_MspInit+0x3c>)
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b01      	ldr	r3, [sp, #4]
 80005ae:	6893      	ldr	r3, [r2, #8]
 80005b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005b4:	6093      	str	r3, [r2, #8]
  LL_PWR_DisableDeadBatteryPD();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	b002      	add	sp, #8
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40007000 	.word	0x40007000

080005c4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	4605      	mov	r5, r0
 80005c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	2214      	movs	r2, #20
 80005cc:	2100      	movs	r1, #0
 80005ce:	a803      	add	r0, sp, #12
 80005d0:	f001 fc78 	bl	8001ec4 <memset>
  if(hdac->Instance==DAC1)
 80005d4:	682a      	ldr	r2, [r5, #0]
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <HAL_DAC_MspInit+0x90>)
 80005d8:	429a      	cmp	r2, r3
 80005da:	d139      	bne.n	8000650 <HAL_DAC_MspInit+0x8c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */
  
  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005dc:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80005e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e4:	2610      	movs	r6, #16
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80005e8:	4c1b      	ldr	r4, [pc, #108]	; (8000658 <HAL_DAC_MspInit+0x94>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80005f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005fc:	f042 0201 	orr.w	r2, r2, #1
 8000600:	64da      	str	r2, [r3, #76]	; 0x4c
 8000602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	9302      	str	r3, [sp, #8]
 800060a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000614:	e9cd 6303 	strd	r6, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f000 fdf4 	bl	8001204 <HAL_GPIO_Init>
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <HAL_DAC_MspInit+0x98>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800061e:	60a6      	str	r6, [r4, #8]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000620:	2306      	movs	r3, #6
 8000622:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800062e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000636:	e9c4 1205 	strd	r1, r2, [r4, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800063a:	4620      	mov	r0, r4
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800063c:	2220      	movs	r2, #32
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800063e:	e9c4 2307 	strd	r2, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000642:	f000 fca1 	bl	8000f88 <HAL_DMA_Init>
 8000646:	b108      	cbz	r0, 800064c <HAL_DAC_MspInit+0x88>
    {
      Error_Handler();
 8000648:	f7ff fe16 	bl	8000278 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800064c:	60ac      	str	r4, [r5, #8]
 800064e:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */
  
  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000650:	b008      	add	sp, #32
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	50000800 	.word	0x50000800
 8000658:	200000ec 	.word	0x200000ec
 800065c:	40020008 	.word	0x40020008

08000660 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000660:	6803      	ldr	r3, [r0, #0]
 8000662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8000666:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8000668:	d10c      	bne.n	8000684 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800066a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800066e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000670:	f042 0201 	orr.w	r2, r2, #1
 8000674:	659a      	str	r2, [r3, #88]	; 0x58
 8000676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000680:	b002      	add	sp, #8
 8000682:	4770      	bx	lr
  else if(htim_base->Instance==TIM6)
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <HAL_TIM_Base_MspInit+0x40>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d1fa      	bne.n	8000680 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_TIM_Base_MspInit+0x44>)
 800068c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800068e:	f042 0210 	orr.w	r2, r2, #16
 8000692:	659a      	str	r2, [r3, #88]	; 0x58
 8000694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	9b01      	ldr	r3, [sp, #4]
}
 800069e:	e7ef      	b.n	8000680 <HAL_TIM_Base_MspInit+0x20>
 80006a0:	40001000 	.word	0x40001000
 80006a4:	40021000 	.word	0x40021000

080006a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a8:	4770      	bx	lr

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler>

080006b2 <SVC_Handler>:
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:
 80006b4:	4770      	bx	lr

080006b6 <PendSV_Handler>:
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 b8cc 	b.w	8000854 <HAL_IncTick>

080006bc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80006bc:	4801      	ldr	r0, [pc, #4]	; (80006c4 <DMA1_Channel1_IRQHandler+0x8>)
 80006be:	f000 bd48 	b.w	8001152 <HAL_DMA_IRQHandler>
 80006c2:	bf00      	nop
 80006c4:	200000ec 	.word	0x200000ec

080006c8 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80006c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006cc:	f000 be78 	b.w	80013c0 <HAL_GPIO_EXTI_IRQHandler>

080006d0 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <BSP_LED_Init+0x44>)
{
 80006d2:	b530      	push	{r4, r5, lr}
  LED2_GPIO_CLK_ENABLE();
 80006d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006d6:	f042 0201 	orr.w	r2, r2, #1
 80006da:	64da      	str	r2, [r3, #76]	; 0x4c
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80006de:	b087      	sub	sp, #28
  LED2_GPIO_CLK_ENABLE();
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	9b00      	ldr	r3, [sp, #0]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80006e8:	2520      	movs	r5, #32
 80006ea:	2301      	movs	r3, #1
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2400      	movs	r4, #0
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80006ee:	e9cd 5301 	strd	r5, r3, [sp, #4]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80006f2:	a901      	add	r1, sp, #4
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80006fe:	f000 fd81 	bl	8001204 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000702:	4622      	mov	r2, r4
 8000704:	4629      	mov	r1, r5
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f000 fe4d 	bl	80013a8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 800070e:	4620      	mov	r0, r4
 8000710:	b007      	add	sp, #28
 8000712:	bd30      	pop	{r4, r5, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000718:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2120      	movs	r1, #32
 800071e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000722:	f000 fe41 	bl	80013a8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8000726:	2000      	movs	r0, #0
 8000728:	bd08      	pop	{r3, pc}

0800072a <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800072a:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800072c:	2120      	movs	r1, #32
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f000 fe3e 	bl	80013b2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8000736:	2000      	movs	r0, #0
 8000738:	bd08      	pop	{r3, pc}
	...

0800073c <BSP_PB_Init>:
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <BSP_PB_Init+0x70>)
{
 800073e:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000742:	f042 0204 	orr.w	r2, r2, #4
 8000746:	64da      	str	r2, [r3, #76]	; 0x4c
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800074a:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	9b00      	ldr	r3, [sp, #0]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800075a:	2302      	movs	r3, #2
{
 800075c:	4605      	mov	r5, r0
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	e9cd 3303 	strd	r3, r3, [sp, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000762:	b939      	cbnz	r1, 8000774 <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000764:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <BSP_PB_Init+0x74>)
 8000768:	a901      	add	r1, sp, #4
 800076a:	f000 fd4b 	bl	8001204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 800076e:	2000      	movs	r0, #0
 8000770:	b007      	add	sp, #28
 8000772:	bd30      	pop	{r4, r5, pc}
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000774:	4c0f      	ldr	r4, [pc, #60]	; (80007b4 <BSP_PB_Init+0x78>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <BSP_PB_Init+0x7c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <BSP_PB_Init+0x74>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800077a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800077c:	a901      	add	r1, sp, #4
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800077e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000782:	f000 fd3f 	bl	8001204 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000786:	490d      	ldr	r1, [pc, #52]	; (80007bc <BSP_PB_Init+0x80>)
 8000788:	4620      	mov	r0, r4
 800078a:	f000 fd34 	bl	80011f6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <BSP_PB_Init+0x84>)
 8000790:	2100      	movs	r1, #0
 8000792:	4620      	mov	r0, r4
 8000794:	f000 fd27 	bl	80011e6 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000798:	2200      	movs	r2, #0
 800079a:	210f      	movs	r1, #15
 800079c:	2028      	movs	r0, #40	; 0x28
 800079e:	f000 f891 	bl	80008c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80007a2:	2028      	movs	r0, #40	; 0x28
 80007a4:	f000 f8c2 	bl	800092c <HAL_NVIC_EnableIRQ>
 80007a8:	e7e1      	b.n	800076e <BSP_PB_Init+0x32>
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000800 	.word	0x48000800
 80007b4:	200001cc 	.word	0x200001cc
 80007b8:	10110000 	.word	0x10110000
 80007bc:	0600000d 	.word	0x0600000d
 80007c0:	080007c7 	.word	0x080007c7

080007c4 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80007c4:	4770      	bx	lr

080007c6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80007c6:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fffb 	bl	80007c4 <BSP_PB_Callback>
}
 80007ce:	bd08      	pop	{r3, pc}

080007d0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SystemInit+0x18>)
 80007d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80007d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80007da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e2:	609a      	str	r2, [r3, #8]
#endif
}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80007ee:	4e0f      	ldr	r6, [pc, #60]	; (800082c <HAL_InitTick+0x40>)
{
 80007f0:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80007f2:	6830      	ldr	r0, [r6, #0]
 80007f4:	b908      	cbnz	r0, 80007fa <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80007f6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <HAL_InitTick+0x44>)
 80007fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000800:	fbb3 f3f0 	udiv	r3, r3, r0
 8000804:	6810      	ldr	r0, [r2, #0]
 8000806:	fbb0 f0f3 	udiv	r0, r0, r3
 800080a:	f000 f89d 	bl	8000948 <HAL_SYSTICK_Config>
 800080e:	4604      	mov	r4, r0
 8000810:	2800      	cmp	r0, #0
 8000812:	d1f0      	bne.n	80007f6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000814:	2d0f      	cmp	r5, #15
 8000816:	d8ee      	bhi.n	80007f6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	4602      	mov	r2, r0
 800081a:	4629      	mov	r1, r5
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f000 f850 	bl	80008c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000824:	6075      	str	r5, [r6, #4]
 8000826:	4620      	mov	r0, r4
 8000828:	e7e6      	b.n	80007f8 <HAL_InitTick+0xc>
 800082a:	bf00      	nop
 800082c:	2000007c 	.word	0x2000007c
 8000830:	20000078 	.word	0x20000078

08000834 <HAL_Init>:
{
 8000834:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000836:	2003      	movs	r0, #3
 8000838:	f000 f832 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff ffd5 	bl	80007ec <HAL_InitTick>
 8000842:	4604      	mov	r4, r0
 8000844:	b918      	cbnz	r0, 800084e <HAL_Init+0x1a>
    HAL_MspInit();
 8000846:	f7ff fe9d 	bl	8000584 <HAL_MspInit>
}
 800084a:	4620      	mov	r0, r4
 800084c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800084e:	2401      	movs	r4, #1
 8000850:	e7fb      	b.n	800084a <HAL_Init+0x16>
	...

08000854 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000854:	4a03      	ldr	r2, [pc, #12]	; (8000864 <HAL_IncTick+0x10>)
 8000856:	4904      	ldr	r1, [pc, #16]	; (8000868 <HAL_IncTick+0x14>)
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	6809      	ldr	r1, [r1, #0]
 800085c:	440b      	add	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200001d4 	.word	0x200001d4
 8000868:	2000007c 	.word	0x2000007c

0800086c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800086c:	4b01      	ldr	r3, [pc, #4]	; (8000874 <HAL_GetTick+0x8>)
 800086e:	6818      	ldr	r0, [r3, #0]
}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	200001d4 	.word	0x200001d4

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b538      	push	{r3, r4, r5, lr}
 800087a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff fff6 	bl	800086c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000880:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	bf1c      	itt	ne
 8000884:	4b05      	ldrne	r3, [pc, #20]	; (800089c <HAL_Delay+0x24>)
 8000886:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000888:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800088a:	bf18      	it	ne
 800088c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800088e:	f7ff ffed 	bl	800086c <HAL_GetTick>
 8000892:	1b40      	subs	r0, r0, r5
 8000894:	42a0      	cmp	r0, r4
 8000896:	d3fa      	bcc.n	800088e <HAL_Delay+0x16>
  {
  }
}
 8000898:	bd38      	pop	{r3, r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	2000007c 	.word	0x2000007c

080008a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008a8:	041b      	lsls	r3, r3, #16
 80008aa:	0c1b      	lsrs	r3, r3, #16
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	0200      	lsls	r0, r0, #8
 80008b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80008ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008bc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c6:	b570      	push	{r4, r5, r6, lr}
 80008c8:	68dc      	ldr	r4, [r3, #12]
 80008ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ce:	f1c4 0507 	rsb	r5, r4, #7
 80008d2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	bf28      	it	cs
 80008da:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e0:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	bf8c      	ite	hi
 80008e8:	3c03      	subhi	r4, #3
 80008ea:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	ea21 0303 	bic.w	r3, r1, r3
 80008f0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f2:	fa06 f404 	lsl.w	r4, r6, r4
 80008f6:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80008fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	bfa8      	it	ge
 8000902:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000906:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	bfbc      	itt	lt
 800090c:	f000 000f 	andlt.w	r0, r0, #15
 8000910:	4a05      	ldrlt	r2, [pc, #20]	; (8000928 <HAL_NVIC_SetPriority+0x64>)
 8000912:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	bfaa      	itet	ge
 8000916:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00
 8000928:	e000ed14 	.word	0xe000ed14

0800092c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800092c:	2800      	cmp	r0, #0
 800092e:	db08      	blt.n	8000942 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000930:	0942      	lsrs	r2, r0, #5
 8000932:	2301      	movs	r3, #1
 8000934:	f000 001f 	and.w	r0, r0, #31
 8000938:	fa03 f000 	lsl.w	r0, r3, r0
 800093c:	4b01      	ldr	r3, [pc, #4]	; (8000944 <HAL_NVIC_EnableIRQ+0x18>)
 800093e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100

08000948 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	3801      	subs	r0, #1
 800094a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800094e:	d20a      	bcs.n	8000966 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000954:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	21f0      	movs	r1, #240	; 0xf0
 8000958:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000974:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8000976:	4604      	mov	r4, r0
 8000978:	b168      	cbz	r0, 8000996 <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800097a:	7903      	ldrb	r3, [r0, #4]
 800097c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000980:	b913      	cbnz	r3, 8000988 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000982:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000984:	f7ff fe1e 	bl	80005c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000988:	2302      	movs	r3, #2
 800098a:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800098c:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800098e:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000990:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000992:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8000994:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000996:	2001      	movs	r0, #1
 8000998:	e7fc      	b.n	8000994 <HAL_DAC_Init+0x20>

0800099a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800099a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800099c:	7943      	ldrb	r3, [r0, #5]
 800099e:	2b01      	cmp	r3, #1
{
 80009a0:	4605      	mov	r5, r0
 80009a2:	460f      	mov	r7, r1
 80009a4:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hdac);
 80009a8:	d025      	beq.n	80009f6 <HAL_DAC_Start+0x5c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80009aa:	682a      	ldr	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80009ac:	712c      	strb	r4, [r5, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80009ae:	6811      	ldr	r1, [r2, #0]
  __HAL_LOCK(hdac);
 80009b0:	2001      	movs	r0, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80009b2:	f007 0610 	and.w	r6, r7, #16
 80009b6:	fa00 f306 	lsl.w	r3, r0, r6
 80009ba:	430b      	orrs	r3, r1
  __HAL_LOCK(hdac);
 80009bc:	7168      	strb	r0, [r5, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80009be:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80009c0:	f7ff ff5a 	bl	8000878 <HAL_Delay>
 80009c4:	682b      	ldr	r3, [r5, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80009c6:	681a      	ldr	r2, [r3, #0]
  if (Channel == DAC_CHANNEL_1)
 80009c8:	b967      	cbnz	r7, 80009e4 <HAL_DAC_Start+0x4a>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80009ca:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 80009ce:	42a2      	cmp	r2, r4
 80009d0:	d103      	bne.n	80009da <HAL_DAC_Start+0x40>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80009d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009da:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009dc:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80009de:	712b      	strb	r3, [r5, #4]
  __HAL_UNLOCK(hdac);
 80009e0:	7168      	strb	r0, [r5, #5]

  /* Return function status */
  return HAL_OK;
}
 80009e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80009e4:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 80009e8:	40b4      	lsls	r4, r6
 80009ea:	42a2      	cmp	r2, r4
 80009ec:	d1f5      	bne.n	80009da <HAL_DAC_Start+0x40>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	f042 0202 	orr.w	r2, r2, #2
 80009f4:	e7f0      	b.n	80009d8 <HAL_DAC_Start+0x3e>
  __HAL_LOCK(hdac);
 80009f6:	4620      	mov	r0, r4
 80009f8:	e7f3      	b.n	80009e2 <HAL_DAC_Start+0x48>

080009fa <HAL_DAC_Stop>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80009fa:	6802      	ldr	r2, [r0, #0]
{
 80009fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_DAC_DISABLE(hdac, Channel);
 80009fe:	f001 0110 	and.w	r1, r1, #16
 8000a02:	6813      	ldr	r3, [r2, #0]
 8000a04:	2401      	movs	r4, #1
 8000a06:	fa04 f101 	lsl.w	r1, r4, r1
{
 8000a0a:	4605      	mov	r5, r0
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a0c:	ea23 0301 	bic.w	r3, r3, r1
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8000a10:	4620      	mov	r0, r4
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a12:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8000a14:	f7ff ff30 	bl	8000878 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a18:	712c      	strb	r4, [r5, #4]

  /* Return function status */
  return HAL_OK;
}
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000a20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000a24:	7940      	ldrb	r0, [r0, #5]
 8000a26:	2801      	cmp	r0, #1
{
 8000a28:	460d      	mov	r5, r1
 8000a2a:	f04f 0602 	mov.w	r6, #2
 8000a2e:	4611      	mov	r1, r2
 8000a30:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 8000a32:	d02f      	beq.n	8000a94 <HAL_DAC_Start_DMA+0x74>
 8000a34:	2001      	movs	r0, #1
 8000a36:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a38:	7126      	strb	r6, [r4, #4]
 8000a3a:	6820      	ldr	r0, [r4, #0]

  if (Channel == DAC_CHANNEL_1)
 8000a3c:	2d00      	cmp	r5, #0
 8000a3e:	d131      	bne.n	8000aa4 <HAL_DAC_Start_DMA+0x84>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000a40:	68a6      	ldr	r6, [r4, #8]
 8000a42:	4f2c      	ldr	r7, [pc, #176]	; (8000af4 <HAL_DAC_Start_DMA+0xd4>)
 8000a44:	62f7      	str	r7, [r6, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000a46:	4f2c      	ldr	r7, [pc, #176]	; (8000af8 <HAL_DAC_Start_DMA+0xd8>)
 8000a48:	6337      	str	r7, [r6, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000a4a:	4f2c      	ldr	r7, [pc, #176]	; (8000afc <HAL_DAC_Start_DMA+0xdc>)
 8000a4c:	6377      	str	r7, [r6, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000a4e:	6806      	ldr	r6, [r0, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000a50:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000a52:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8000a56:	6006      	str	r6, [r0, #0]
    switch (Alignment)
 8000a58:	d01e      	beq.n	8000a98 <HAL_DAC_Start_DMA+0x78>
 8000a5a:	2a08      	cmp	r2, #8
 8000a5c:	d01f      	beq.n	8000a9e <HAL_DAC_Start_DMA+0x7e>
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d140      	bne.n	8000ae4 <HAL_DAC_Start_DMA+0xc4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000a62:	f100 0208 	add.w	r2, r0, #8

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a66:	6806      	ldr	r6, [r0, #0]
 8000a68:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8000a6c:	6006      	str	r6, [r0, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000a6e:	68a0      	ldr	r0, [r4, #8]
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000a70:	f000 fafa 	bl	8001068 <HAL_DMA_Start_IT>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000a74:	2300      	movs	r3, #0
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000a76:	4606      	mov	r6, r0
  __HAL_UNLOCK(hdac);
 8000a78:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8000a7a:	2800      	cmp	r0, #0
 8000a7c:	d134      	bne.n	8000ae8 <HAL_DAC_Start_DMA+0xc8>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	f005 0510 	and.w	r5, r5, #16
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	2001      	movs	r0, #1
 8000a88:	fa00 f505 	lsl.w	r5, r0, r5
 8000a8c:	4315      	orrs	r5, r2
 8000a8e:	601d      	str	r5, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8000a90:	f7ff fef2 	bl	8000878 <HAL_Delay>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8000a94:	4630      	mov	r0, r6
 8000a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000a98:	f100 020c 	add.w	r2, r0, #12
        break;
 8000a9c:	e7e3      	b.n	8000a66 <HAL_DAC_Start_DMA+0x46>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000a9e:	f100 0210 	add.w	r2, r0, #16
        break;
 8000aa2:	e7e0      	b.n	8000a66 <HAL_DAC_Start_DMA+0x46>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000aa4:	68e6      	ldr	r6, [r4, #12]
 8000aa6:	4f16      	ldr	r7, [pc, #88]	; (8000b00 <HAL_DAC_Start_DMA+0xe0>)
 8000aa8:	62f7      	str	r7, [r6, #44]	; 0x2c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000aaa:	4f16      	ldr	r7, [pc, #88]	; (8000b04 <HAL_DAC_Start_DMA+0xe4>)
 8000aac:	6337      	str	r7, [r6, #48]	; 0x30
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000aae:	4f16      	ldr	r7, [pc, #88]	; (8000b08 <HAL_DAC_Start_DMA+0xe8>)
 8000ab0:	6377      	str	r7, [r6, #52]	; 0x34
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ab2:	6806      	ldr	r6, [r0, #0]
    switch (Alignment)
 8000ab4:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ab6:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
 8000aba:	6006      	str	r6, [r0, #0]
    switch (Alignment)
 8000abc:	d00a      	beq.n	8000ad4 <HAL_DAC_Start_DMA+0xb4>
 8000abe:	2a08      	cmp	r2, #8
 8000ac0:	d00b      	beq.n	8000ada <HAL_DAC_Start_DMA+0xba>
 8000ac2:	b96a      	cbnz	r2, 8000ae0 <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000ac4:	f100 0214 	add.w	r2, r0, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000ac8:	6806      	ldr	r6, [r0, #0]
 8000aca:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8000ace:	6006      	str	r6, [r0, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000ad0:	68e0      	ldr	r0, [r4, #12]
 8000ad2:	e7cd      	b.n	8000a70 <HAL_DAC_Start_DMA+0x50>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000ad4:	f100 0218 	add.w	r2, r0, #24
        break;
 8000ad8:	e7f6      	b.n	8000ac8 <HAL_DAC_Start_DMA+0xa8>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000ada:	f100 021c 	add.w	r2, r0, #28
        break;
 8000ade:	e7f3      	b.n	8000ac8 <HAL_DAC_Start_DMA+0xa8>
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	e7f1      	b.n	8000ac8 <HAL_DAC_Start_DMA+0xa8>
 8000ae4:	462a      	mov	r2, r5
 8000ae6:	e7be      	b.n	8000a66 <HAL_DAC_Start_DMA+0x46>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ae8:	6923      	ldr	r3, [r4, #16]
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6123      	str	r3, [r4, #16]
 8000af0:	e7d0      	b.n	8000a94 <HAL_DAC_Start_DMA+0x74>
 8000af2:	bf00      	nop
 8000af4:	08000b69 	.word	0x08000b69
 8000af8:	08000b7b 	.word	0x08000b7b
 8000afc:	08000b87 	.word	0x08000b87
 8000b00:	08000dc5 	.word	0x08000dc5
 8000b04:	08000dd7 	.word	0x08000dd7
 8000b08:	08000de3 	.word	0x08000de3

08000b0c <HAL_DAC_Stop_DMA>:

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000b0c:	6803      	ldr	r3, [r0, #0]
{
 8000b0e:	b570      	push	{r4, r5, r6, lr}
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000b10:	f001 0210 	and.w	r2, r1, #16
{
 8000b14:	4604      	mov	r4, r0
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000b16:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	4095      	lsls	r5, r2
 8000b1e:	ea20 0005 	bic.w	r0, r0, r5
 8000b22:	6018      	str	r0, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000b24:	681d      	ldr	r5, [r3, #0]
 8000b26:	2001      	movs	r0, #1
 8000b28:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2c:	ea25 0202 	bic.w	r2, r5, r2
{
 8000b30:	460e      	mov	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 8000b32:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8000b34:	f7ff fea0 	bl	8000878 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000b38:	b95e      	cbnz	r6, 8000b52 <HAL_DAC_Stop_DMA+0x46>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8000b3a:	68a0      	ldr	r0, [r4, #8]
 8000b3c:	f000 fad6 	bl	80010ec <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b40:	6822      	ldr	r2, [r4, #0]
 8000b42:	6813      	ldr	r3, [r2, #0]
 8000b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b48:	6013      	str	r3, [r2, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8000b4a:	b150      	cbz	r0, 8000b62 <HAL_DAC_Stop_DMA+0x56>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8000b4c:	2304      	movs	r3, #4
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8000b4e:	7123      	strb	r3, [r4, #4]
  }

  /* Return function status */
  return status;
}
 8000b50:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8000b52:	68e0      	ldr	r0, [r4, #12]
 8000b54:	f000 faca 	bl	80010ec <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b58:	6822      	ldr	r2, [r4, #0]
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b60:	e7f2      	b.n	8000b48 <HAL_DAC_Stop_DMA+0x3c>
    hdac->State = HAL_DAC_STATE_READY;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e7f3      	b.n	8000b4e <HAL_DAC_Stop_DMA+0x42>

08000b66 <HAL_DAC_ConvCpltCallbackCh1>:
 8000b66:	4770      	bx	lr

08000b68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000b68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b6a:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f7ff fffa 	bl	8000b66 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000b72:	2301      	movs	r3, #1
 8000b74:	7123      	strb	r3, [r4, #4]
}
 8000b76:	bd10      	pop	{r4, pc}

08000b78 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8000b78:	4770      	bx	lr

08000b7a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000b7a:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000b7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000b7e:	f7ff fffb 	bl	8000b78 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000b82:	bd08      	pop	{r3, pc}

08000b84 <HAL_DAC_ErrorCallbackCh1>:
 8000b84:	4770      	bx	lr

08000b86 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000b86:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b88:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000b8a:	6923      	ldr	r3, [r4, #16]
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000b92:	4620      	mov	r0, r4
 8000b94:	f7ff fff6 	bl	8000b84 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	7123      	strb	r3, [r4, #4]
}
 8000b9c:	bd10      	pop	{r4, pc}
	...

08000ba0 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8000ba0:	7943      	ldrb	r3, [r0, #5]
 8000ba2:	2b01      	cmp	r3, #1
{
 8000ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ba8:	4604      	mov	r4, r0
 8000baa:	460e      	mov	r6, r1
 8000bac:	4615      	mov	r5, r2
 8000bae:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8000bb2:	f000 80ba 	beq.w	8000d2a <HAL_DAC_ConfigChannel+0x18a>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8000bb6:	688b      	ldr	r3, [r1, #8]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bb8:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8000bba:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000bbc:	2b04      	cmp	r3, #4
  __HAL_LOCK(hdac);
 8000bbe:	7162      	strb	r2, [r4, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000bc0:	d127      	bne.n	8000c12 <HAL_DAC_ConfigChannel+0x72>
    if (Channel == DAC_CHANNEL_1)
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	f040 80b7 	bne.w	8000d36 <HAL_DAC_ConfigChannel+0x196>
      tickstart = HAL_GetTick();
 8000bc8:	f7ff fe50 	bl	800086c <HAL_GetTick>
 8000bcc:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	0418      	lsls	r0, r3, #16
 8000bd4:	f100 809d 	bmi.w	8000d12 <HAL_DAC_ConfigChannel+0x172>
      HAL_Delay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff fe4d 	bl	8000878 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000be4:	6821      	ldr	r1, [r4, #0]
 8000be6:	f005 0010 	and.w	r0, r5, #16
 8000bea:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8000bec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000bf0:	4083      	lsls	r3, r0
 8000bf2:	ea22 0203 	bic.w	r2, r2, r3
 8000bf6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8000bf8:	4083      	lsls	r3, r0
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	648a      	str	r2, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000bfe:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	4082      	lsls	r2, r0
 8000c04:	ea23 0302 	bic.w	r3, r3, r2
 8000c08:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000c0a:	fa02 f000 	lsl.w	r0, r2, r0
 8000c0e:	4303      	orrs	r3, r0
 8000c10:	64cb      	str	r3, [r1, #76]	; 0x4c
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000c12:	69f3      	ldr	r3, [r6, #28]
 8000c14:	6822      	ldr	r2, [r4, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	f005 0510 	and.w	r5, r5, #16
 8000c1c:	d108      	bne.n	8000c30 <HAL_DAC_ConfigChannel+0x90>
    tmpreg1 = hdac->Instance->CCR;
 8000c1e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c20:	211f      	movs	r1, #31
 8000c22:	40a9      	lsls	r1, r5
 8000c24:	ea23 0101 	bic.w	r1, r3, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c28:	6a33      	ldr	r3, [r6, #32]
 8000c2a:	40ab      	lsls	r3, r5
 8000c2c:	430b      	orrs	r3, r1
    hdac->Instance->CCR = tmpreg1;
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38
  tmpreg1 = hdac->Instance->MCR;
 8000c30:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c32:	2307      	movs	r3, #7
 8000c34:	40ab      	lsls	r3, r5
 8000c36:	ea27 0703 	bic.w	r7, r7, r3
 8000c3a:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8000c3e:	07d1      	lsls	r1, r2, #31
 8000c40:	f100 8084 	bmi.w	8000d4c <HAL_DAC_ConfigChannel+0x1ac>
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8000c44:	0792      	lsls	r2, r2, #30
 8000c46:	f100 8084 	bmi.w	8000d52 <HAL_DAC_ConfigChannel+0x1b2>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000c4a:	fab3 f883 	clz	r8, r3
 8000c4e:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000c52:	68b2      	ldr	r2, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8000c54:	f44f 7180 	mov.w	r1, #256	; 0x100
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000c58:	4313      	orrs	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8000c5a:	40a9      	lsls	r1, r5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000c5c:	7932      	ldrb	r2, [r6, #4]
 8000c5e:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 8000c62:	ea27 0701 	bic.w	r7, r7, r1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000c66:	7971      	ldrb	r1, [r6, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000c68:	2a01      	cmp	r2, #1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000c6a:	ea43 0308 	orr.w	r3, r3, r8
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000c6e:	bf14      	ite	ne
 8000c70:	f04f 0800 	movne.w	r8, #0
 8000c74:	f44f 7880 	moveq.w	r8, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000c78:	2901      	cmp	r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000c7a:	ea48 0303 	orr.w	r3, r8, r3
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000c7e:	bf14      	ite	ne
 8000c80:	f04f 0800 	movne.w	r8, #0
 8000c84:	f44f 7800 	moveq.w	r8, #512	; 0x200
 8000c88:	ea48 0803 	orr.w	r8, r8, r3
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000c8c:	6833      	ldr	r3, [r6, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8000c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c92:	40aa      	lsls	r2, r5
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000c94:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8000c96:	ea27 0702 	bic.w	r7, r7, r2
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000c9a:	d163      	bne.n	8000d64 <HAL_DAC_ConfigChannel+0x1c4>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8000c9c:	f000 ff34 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_DAC_ConfigChannel+0x1c8>)
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d958      	bls.n	8000d58 <HAL_DAC_ConfigChannel+0x1b8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8000ca6:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
  hdac->Instance->MCR = tmpreg1;
 8000caa:	6822      	ldr	r2, [r4, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cac:	fa08 f805 	lsl.w	r8, r8, r5
 8000cb0:	ea48 0707 	orr.w	r7, r8, r7
  hdac->Instance->MCR = tmpreg1;
 8000cb4:	63d7      	str	r7, [r2, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbc:	40a9      	lsls	r1, r5
 8000cbe:	ea23 0301 	bic.w	r3, r3, r1
 8000cc2:	6013      	str	r3, [r2, #0]
  tmpreg1 = hdac->Instance->CR;
 8000cc4:	6811      	ldr	r1, [r2, #0]
  tmpreg2 = sConfig->DAC_Trigger;
 8000cc6:	68f3      	ldr	r3, [r6, #12]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000cc8:	f640 70fe 	movw	r0, #4094	; 0xffe
 8000ccc:	40a8      	lsls	r0, r5
 8000cce:	ea21 0000 	bic.w	r0, r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cd2:	fa03 f105 	lsl.w	r1, r3, r5
 8000cd6:	4301      	orrs	r1, r0
  hdac->Instance->CR = tmpreg1;
 8000cd8:	6011      	str	r1, [r2, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000cda:	6811      	ldr	r1, [r2, #0]
 8000cdc:	20c0      	movs	r0, #192	; 0xc0
 8000cde:	40a8      	lsls	r0, r5
 8000ce0:	ea21 0100 	bic.w	r1, r1, r0
 8000ce4:	6011      	str	r1, [r2, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8000ce6:	f3c3 0183 	ubfx	r1, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8000cea:	6933      	ldr	r3, [r6, #16]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8000cec:	6e10      	ldr	r0, [r2, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8000cee:	019b      	lsls	r3, r3, #6
 8000cf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000cf4:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8000cf6:	f640 710f 	movw	r1, #3855	; 0xf0f
 8000cfa:	40ab      	lsls	r3, r5
 8000cfc:	fa01 f505 	lsl.w	r5, r1, r5
 8000d00:	ea20 0505 	bic.w	r5, r0, r5
 8000d04:	431d      	orrs	r5, r3
  __HAL_UNLOCK(hdac);
 8000d06:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8000d08:	2301      	movs	r3, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8000d0a:	6615      	str	r5, [r2, #96]	; 0x60
  hdac->State = HAL_DAC_STATE_READY;
 8000d0c:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8000d0e:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8000d10:	e00b      	b.n	8000d2a <HAL_DAC_ConfigChannel+0x18a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000d12:	f7ff fdab 	bl	800086c <HAL_GetTick>
 8000d16:	1bc0      	subs	r0, r0, r7
 8000d18:	2801      	cmp	r0, #1
 8000d1a:	f67f af58 	bls.w	8000bce <HAL_DAC_ConfigChannel+0x2e>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000d1e:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d20:	2003      	movs	r0, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d28:	7120      	strb	r0, [r4, #4]
}
 8000d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000d2e:	f7ff fd9d 	bl	800086c <HAL_GetTick>
 8000d32:	2801      	cmp	r0, #1
 8000d34:	d8f3      	bhi.n	8000d1e <HAL_DAC_ConfigChannel+0x17e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dbf7      	blt.n	8000d2e <HAL_DAC_ConfigChannel+0x18e>
      HAL_Delay(1U);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fd9a 	bl	8000878 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000d48:	645a      	str	r2, [r3, #68]	; 0x44
 8000d4a:	e74b      	b.n	8000be4 <HAL_DAC_ConfigChannel+0x44>
    connectOnChip = 0x00000000UL;
 8000d4c:	f04f 0800 	mov.w	r8, #0
 8000d50:	e77f      	b.n	8000c52 <HAL_DAC_ConfigChannel+0xb2>
    connectOnChip = DAC_MCR_MODE1_0;
 8000d52:	f04f 0801 	mov.w	r8, #1
 8000d56:	e77c      	b.n	8000c52 <HAL_DAC_ConfigChannel+0xb2>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_DAC_ConfigChannel+0x1cc>)
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d9a5      	bls.n	8000caa <HAL_DAC_ConfigChannel+0x10a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000d5e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000d62:	e7a2      	b.n	8000caa <HAL_DAC_ConfigChannel+0x10a>
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8000d64:	431f      	orrs	r7, r3
 8000d66:	e7a0      	b.n	8000caa <HAL_DAC_ConfigChannel+0x10a>
 8000d68:	09896800 	.word	0x09896800
 8000d6c:	04c4b400 	.word	0x04c4b400

08000d70 <HAL_DACEx_SawtoothWaveGenerate>:
  * @note    Sawtooth reset and step triggers are configured by calling @ref HAL_DAC_ConfigChannel
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SawtoothWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Polarity,
                                                 uint32_t ResetData, uint32_t StepData)
{
 8000d70:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_SAWTOOTH_POLARITY(Polarity));
  assert_param(IS_DAC_RESET_DATA(ResetData));
  assert_param(IS_DAC_STEP_DATA(StepData));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d72:	7944      	ldrb	r4, [r0, #5]
 8000d74:	2c01      	cmp	r4, #1
 8000d76:	f04f 0402 	mov.w	r4, #2
 8000d7a:	d020      	beq.n	8000dbe <HAL_DACEx_SawtoothWaveGenerate+0x4e>
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	9a03      	ldr	r2, [sp, #12]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d80:	7104      	strb	r4, [r0, #4]
  __HAL_LOCK(hdac);
 8000d82:	2501      	movs	r5, #1
 8000d84:	7145      	strb	r5, [r0, #5]
 8000d86:	6804      	ldr	r4, [r0, #0]
 8000d88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (Channel == DAC_CHANNEL_1)
 8000d8c:	b989      	cbnz	r1, 8000db2 <HAL_DACEx_SawtoothWaveGenerate+0x42>
  {
    /* Configure the sawtooth wave generation data parameters */
    MODIFY_REG(hdac->Instance->STR1,
 8000d8e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000d90:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8000d94:	4313      	orrs	r3, r2
 8000d96:	65a3      	str	r3, [r4, #88]	; 0x58
               | Polarity
               | (ResetData << DAC_STR2_STRSTDATA2_Pos));
  }

  /* Enable the sawtooth wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1) << (Channel & 0x10UL), (uint32_t)(DAC_CR_WAVE1_1 | DAC_CR_WAVE1_0) << (Channel & 0x10UL));
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	f001 0310 	and.w	r3, r1, #16
 8000d9e:	21c0      	movs	r1, #192	; 0xc0
 8000da0:	4099      	lsls	r1, r3
 8000da2:	4311      	orrs	r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000da4:	2301      	movs	r3, #1
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1) << (Channel & 0x10UL), (uint32_t)(DAC_CR_WAVE1_1 | DAC_CR_WAVE1_0) << (Channel & 0x10UL));
 8000da6:	6021      	str	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000da8:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000daa:	2300      	movs	r3, #0
 8000dac:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 8000dae:	4618      	mov	r0, r3
}
 8000db0:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hdac->Instance->STR2,
 8000db2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000db4:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8000db8:	4313      	orrs	r3, r2
 8000dba:	65e3      	str	r3, [r4, #92]	; 0x5c
 8000dbc:	e7ec      	b.n	8000d98 <HAL_DACEx_SawtoothWaveGenerate+0x28>
  __HAL_LOCK(hdac);
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	e7f6      	b.n	8000db0 <HAL_DACEx_SawtoothWaveGenerate+0x40>

08000dc2 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dc2:	4770      	bx	lr

08000dc4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000dc4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dc6:	6a84      	ldr	r4, [r0, #40]	; 0x28

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f7ff fffa 	bl	8000dc2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	7123      	strb	r3, [r4, #4]
}
 8000dd2:	bd10      	pop	{r4, pc}

08000dd4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8000dd4:	4770      	bx	lr

08000dd6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000dd6:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000dd8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000dda:	f7ff fffb 	bl	8000dd4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000dde:	bd08      	pop	{r3, pc}

08000de0 <HAL_DACEx_ErrorCallbackCh2>:
 8000de0:	4770      	bx	lr

08000de2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000de2:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000de4:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000de6:	6923      	ldr	r3, [r4, #16]
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff fff6 	bl	8000de0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000df4:	2301      	movs	r3, #1
 8000df6:	7123      	strb	r3, [r4, #4]
}
 8000df8:	bd10      	pop	{r4, pc}

08000dfa <HAL_DACEx_SelfCalibrate>:
{
 8000dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dfe:	4688      	mov	r8, r1
 8000e00:	b085      	sub	sp, #20
 8000e02:	4614      	mov	r4, r2
  if (hdac == NULL)
 8000e04:	4605      	mov	r5, r0
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d07c      	beq.n	8000f04 <HAL_DACEx_SelfCalibrate+0x10a>
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8000e0a:	7903      	ldrb	r3, [r0, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d079      	beq.n	8000f04 <HAL_DACEx_SelfCalibrate+0x10a>
    __HAL_LOCK(hdac);
 8000e10:	7943      	ldrb	r3, [r0, #5]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d078      	beq.n	8000f08 <HAL_DACEx_SelfCalibrate+0x10e>
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8000e16:	6829      	ldr	r1, [r5, #0]
 8000e18:	f002 0b10 	and.w	fp, r2, #16
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    __HAL_LOCK(hdac);
 8000e20:	2001      	movs	r0, #1
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8000e22:	fa03 f70b 	lsl.w	r7, r3, fp
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8000e26:	680b      	ldr	r3, [r1, #0]
    __HAL_LOCK(hdac);
 8000e28:	7168      	strb	r0, [r5, #5]
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8000e2a:	fa00 f20b 	lsl.w	r2, r0, fp
 8000e2e:	ea23 0302 	bic.w	r3, r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
    HAL_Delay(1);
 8000e34:	f7ff fd20 	bl	8000878 <HAL_Delay>
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000e3c:	ea21 0107 	bic.w	r1, r1, r7
 8000e40:	63d9      	str	r1, [r3, #60]	; 0x3c
    tmp = (uint32_t)hdac->Instance;
 8000e42:	9303      	str	r3, [sp, #12]
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8000e44:	9a03      	ldr	r2, [sp, #12]
    if (Channel == DAC_CHANNEL_1)
 8000e46:	2c00      	cmp	r4, #0
 8000e48:	d15a      	bne.n	8000f00 <HAL_DACEx_SelfCalibrate+0x106>
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8000e4a:	3208      	adds	r2, #8
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8000e4c:	9203      	str	r2, [sp, #12]
    *(__IO uint32_t *) tmp = 0x0800U;
 8000e4e:	9a03      	ldr	r2, [sp, #12]
 8000e50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e54:	6011      	str	r1, [r2, #0]
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 8000e5c:	fa0a fa0b 	lsl.w	sl, sl, fp
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000e60:	241f      	movs	r4, #31
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000e62:	ea42 020a 	orr.w	r2, r2, sl
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000e66:	fa04 f40b 	lsl.w	r4, r4, fp
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000e6a:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000e6c:	43e4      	mvns	r4, r4
 8000e6e:	2104      	movs	r1, #4
    delta = 8U;
 8000e70:	2208      	movs	r2, #8
    trimmingvalue = 16U;
 8000e72:	f04f 0910 	mov.w	r9, #16
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000e76:	6828      	ldr	r0, [r5, #0]
 8000e78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000e7a:	fa09 fc0b 	lsl.w	ip, r9, fp
 8000e7e:	4023      	ands	r3, r4
 8000e80:	ea43 030c 	orr.w	r3, r3, ip
 8000e84:	6383      	str	r3, [r0, #56]	; 0x38
      HAL_Delay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	e9cd 1200 	strd	r1, r2, [sp]
 8000e8c:	f7ff fcf4 	bl	8000878 <HAL_Delay>
      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8000e90:	6828      	ldr	r0, [r5, #0]
 8000e92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8000e96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e98:	ea3a 0303 	bics.w	r3, sl, r3
        trimmingvalue -= delta;
 8000e9c:	bf0c      	ite	eq
 8000e9e:	eba9 0902 	subeq.w	r9, r9, r2
        trimmingvalue += delta;
 8000ea2:	4491      	addne	r9, r2
    while (delta != 0U)
 8000ea4:	3901      	subs	r1, #1
      delta >>= 1U;
 8000ea6:	ea4f 0252 	mov.w	r2, r2, lsr #1
    while (delta != 0U)
 8000eaa:	d1e4      	bne.n	8000e76 <HAL_DACEx_SelfCalibrate+0x7c>
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000eac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000eae:	fa09 f20b 	lsl.w	r2, r9, fp
 8000eb2:	4023      	ands	r3, r4
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	6383      	str	r3, [r0, #56]	; 0x38
    HAL_Delay(1U);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fcdd 	bl	8000878 <HAL_Delay>
    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8000ebe:	682a      	ldr	r2, [r5, #0]
 8000ec0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000ec2:	ea1a 0f03 	tst.w	sl, r3
 8000ec6:	d107      	bne.n	8000ed8 <HAL_DACEx_SelfCalibrate+0xde>
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000ec8:	6b93      	ldr	r3, [r2, #56]	; 0x38
      trimmingvalue++;
 8000eca:	f109 0901 	add.w	r9, r9, #1
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8000ece:	401c      	ands	r4, r3
 8000ed0:	fa09 f30b 	lsl.w	r3, r9, fp
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	6393      	str	r3, [r2, #56]	; 0x38
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	ea23 030a 	bic.w	r3, r3, sl
 8000ede:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8000ee0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    sConfig->DAC_TrimmingValue = trimmingvalue;
 8000ee2:	f8c8 9020 	str.w	r9, [r8, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f8c8 301c 	str.w	r3, [r8, #28]
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8000eec:	ea86 0301 	eor.w	r3, r6, r1
 8000ef0:	403b      	ands	r3, r7
 8000ef2:	404b      	eors	r3, r1
    __HAL_UNLOCK(hdac);
 8000ef4:	2000      	movs	r0, #0
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8000ef6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_UNLOCK(hdac);
 8000ef8:	7168      	strb	r0, [r5, #5]
}
 8000efa:	b005      	add	sp, #20
 8000efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8000f00:	3214      	adds	r2, #20
 8000f02:	e7a3      	b.n	8000e4c <HAL_DACEx_SelfCalibrate+0x52>
    status = HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
 8000f06:	e7f8      	b.n	8000efa <HAL_DACEx_SelfCalibrate+0x100>
    __HAL_LOCK(hdac);
 8000f08:	2002      	movs	r0, #2
 8000f0a:	e7f6      	b.n	8000efa <HAL_DACEx_SelfCalibrate+0x100>

08000f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f0e:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8000f12:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000f14:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000f16:	b114      	cbz	r4, 8000f1e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f18:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8000f1c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f1e:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
 8000f22:	f004 051f 	and.w	r5, r4, #31
 8000f26:	2401      	movs	r4, #1
 8000f28:	40ac      	lsls	r4, r5
 8000f2a:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f2c:	6804      	ldr	r4, [r0, #0]
 8000f2e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f30:	6883      	ldr	r3, [r0, #8]
 8000f32:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f34:	bf0b      	itete	eq
 8000f36:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000f38:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f3a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000f3c:	60e2      	strne	r2, [r4, #12]
  }
}
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}

08000f40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000f40:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8000f42:	490d      	ldr	r1, [pc, #52]	; (8000f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8000f46:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8000f48:	4c0d      	ldr	r4, [pc, #52]	; (8000f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	bf88      	it	hi
 8000f4e:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000f50:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000f52:	f021 0103 	bic.w	r1, r1, #3
 8000f56:	440a      	add	r2, r1
 8000f58:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f5a:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f5c:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8000f5e:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f60:	3b08      	subs	r3, #8
 8000f62:	2214      	movs	r2, #20
 8000f64:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	6503      	str	r3, [r0, #80]	; 0x50
}
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	bf00      	nop
 8000f78:	40020820 	.word	0x40020820
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020407 	.word	0x40020407
 8000f84:	40020880 	.word	0x40020880

08000f88 <HAL_DMA_Init>:
{
 8000f88:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d05d      	beq.n	800104c <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f90:	6801      	ldr	r1, [r0, #0]
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_DMA_Init+0xc8>)
 8000f94:	4299      	cmp	r1, r3
 8000f96:	f04f 0014 	mov.w	r0, #20
 8000f9a:	d84a      	bhi.n	8001032 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f9c:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <HAL_DMA_Init+0xcc>)
 8000f9e:	440a      	add	r2, r1
 8000fa0:	fbb2 f2f0 	udiv	r2, r2, r0
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fa8:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8000fac:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8000fb4:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8000fb8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fba:	6920      	ldr	r0, [r4, #16]
  tmp = hdma->Instance->CCR;
 8000fbc:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fbe:	4303      	orrs	r3, r0
 8000fc0:	6960      	ldr	r0, [r4, #20]
 8000fc2:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc4:	69a0      	ldr	r0, [r4, #24]
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	69e0      	ldr	r0, [r4, #28]
 8000fca:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fcc:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fce:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000fd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd6:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000fd8:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8000fda:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f7ff ffaf 	bl	8000f40 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fe2:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000fea:	bf04      	itt	eq
 8000fec:	2300      	moveq	r3, #0
 8000fee:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ff0:	6862      	ldr	r2, [r4, #4]
 8000ff2:	b2d3      	uxtb	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff6:	e9d4 1013 	ldrd	r1, r0, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ffa:	3a01      	subs	r2, #1
 8000ffc:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ffe:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001000:	d81f      	bhi.n	8001042 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001004:	4815      	ldr	r0, [pc, #84]	; (800105c <HAL_DMA_Init+0xd4>)
 8001006:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001008:	441a      	add	r2, r3

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800100a:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800100c:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800100e:	2101      	movs	r1, #1
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001018:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800101a:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800101c:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800101e:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001020:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001022:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001024:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001026:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001028:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800102c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8001030:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_DMA_Init+0xd8>)
 8001034:	440b      	add	r3, r1
 8001036:	fbb3 f3f0 	udiv	r3, r3, r0
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_DMA_Init+0xdc>)
 8001040:	e7b4      	b.n	8000fac <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8001042:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8001044:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001048:	65e3      	str	r3, [r4, #92]	; 0x5c
 800104a:	e7ea      	b.n	8001022 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 800104c:	2001      	movs	r0, #1
 800104e:	e7ef      	b.n	8001030 <HAL_DMA_Init+0xa8>
 8001050:	40020407 	.word	0x40020407
 8001054:	bffdfff8 	.word	0xbffdfff8
 8001058:	1000823f 	.word	0x1000823f
 800105c:	40020940 	.word	0x40020940
 8001060:	bffdfbf8 	.word	0xbffdfbf8
 8001064:	40020400 	.word	0x40020400

08001068 <HAL_DMA_Start_IT>:
{
 8001068:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800106a:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 800106e:	2d01      	cmp	r5, #1
{
 8001070:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001072:	d039      	beq.n	80010e8 <HAL_DMA_Start_IT+0x80>
 8001074:	2501      	movs	r5, #1
 8001076:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800107a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 800107e:	2d01      	cmp	r5, #1
 8001080:	f04f 0600 	mov.w	r6, #0
 8001084:	f04f 0502 	mov.w	r5, #2
 8001088:	d12c      	bne.n	80010e4 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800108a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108e:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001090:	6806      	ldr	r6, [r0, #0]
 8001092:	6835      	ldr	r5, [r6, #0]
 8001094:	f025 0501 	bic.w	r5, r5, #1
 8001098:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800109a:	f7ff ff37 	bl	8000f0c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800109e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	b1ba      	cbz	r2, 80010d4 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010aa:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80010ae:	6811      	ldr	r1, [r2, #0]
 80010b0:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010b2:	bf42      	ittt	mi
 80010b4:	6811      	ldrmi	r1, [r2, #0]
 80010b6:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80010ba:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80010bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80010be:	b11a      	cbz	r2, 80010c8 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010c0:	6811      	ldr	r1, [r2, #0]
 80010c2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80010c6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f022 0204 	bic.w	r2, r2, #4
 80010da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f042 020a 	orr.w	r2, r2, #10
 80010e2:	e7e2      	b.n	80010aa <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 80010e4:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80010e8:	2002      	movs	r0, #2
 80010ea:	e7f2      	b.n	80010d2 <HAL_DMA_Start_IT+0x6a>

080010ec <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ec:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80010f0:	2a02      	cmp	r2, #2
{
 80010f2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f4:	d009      	beq.n	800110a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f6:	2204      	movs	r2, #4
 80010f8:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8001108:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110a:	6802      	ldr	r2, [r0, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800110c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110e:	6811      	ldr	r1, [r2, #0]
 8001110:	f021 010e 	bic.w	r1, r1, #14
 8001114:	6011      	str	r1, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001116:	6801      	ldr	r1, [r0, #0]
 8001118:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800111c:	6001      	str	r1, [r0, #0]
     __HAL_DMA_DISABLE(hdma);
 800111e:	6811      	ldr	r1, [r2, #0]
 8001120:	f021 0101 	bic.w	r1, r1, #1
 8001124:	6011      	str	r1, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001126:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	; 0x40
 800112a:	f002 011f 	and.w	r1, r2, #31
 800112e:	2201      	movs	r2, #1
 8001130:	408a      	lsls	r2, r1
 8001132:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001134:	e9d3 2113 	ldrd	r2, r1, [r3, #76]	; 0x4c
     if (hdma->DMAmuxRequestGen != 0U)
 8001138:	6d58      	ldr	r0, [r3, #84]	; 0x54
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800113a:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800113c:	2800      	cmp	r0, #0
 800113e:	d0dd      	beq.n	80010fc <HAL_DMA_Abort+0x10>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001140:	6802      	ldr	r2, [r0, #0]
 8001142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001146:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001148:	e9d3 2116 	ldrd	r2, r1, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800114e:	6051      	str	r1, [r2, #4]
 8001150:	e7d4      	b.n	80010fc <HAL_DMA_Abort+0x10>

08001152 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001152:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001154:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001156:	6803      	ldr	r3, [r0, #0]
{
 8001158:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800115a:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800115e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001160:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001162:	2404      	movs	r4, #4
 8001164:	4094      	lsls	r4, r2
 8001166:	4234      	tst	r4, r6
 8001168:	d00e      	beq.n	8001188 <HAL_DMA_IRQHandler+0x36>
 800116a:	f015 0f04 	tst.w	r5, #4
 800116e:	d00b      	beq.n	8001188 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001174:	bf5e      	ittt	pl
 8001176:	681a      	ldrpl	r2, [r3, #0]
 8001178:	f022 0204 	bicpl.w	r2, r2, #4
 800117c:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800117e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001180:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001182:	b373      	cbz	r3, 80011e2 <HAL_DMA_IRQHandler+0x90>
}
 8001184:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001186:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001188:	2402      	movs	r4, #2
 800118a:	4094      	lsls	r4, r2
 800118c:	4234      	tst	r4, r6
 800118e:	d012      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 8001190:	f015 0f02 	tst.w	r5, #2
 8001194:	d00f      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	0695      	lsls	r5, r2, #26
 800119a:	d406      	bmi.n	80011aa <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f022 020a 	bic.w	r2, r2, #10
 80011a2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80011aa:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80011ac:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80011ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80011b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011b4:	e7e5      	b.n	8001182 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80011b6:	2408      	movs	r4, #8
 80011b8:	4094      	lsls	r4, r2
 80011ba:	4234      	tst	r4, r6
 80011bc:	d011      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 80011be:	072c      	lsls	r4, r5, #28
 80011c0:	d50f      	bpl.n	80011e2 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c2:	681c      	ldr	r4, [r3, #0]
 80011c4:	f024 040e 	bic.w	r4, r4, #14
 80011c8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011ca:	2301      	movs	r3, #1
 80011cc:	fa03 f202 	lsl.w	r2, r3, r2
 80011d0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80011d4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80011d8:	2300      	movs	r3, #0
 80011da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80011de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80011e0:	e7cf      	b.n	8001182 <HAL_DMA_IRQHandler+0x30>
}
 80011e2:	bc70      	pop	{r4, r5, r6}
 80011e4:	4770      	bx	lr

080011e6 <HAL_EXTI_RegisterCallback>:
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80011e6:	b911      	cbnz	r1, 80011ee <HAL_EXTI_RegisterCallback+0x8>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80011e8:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ea:	4608      	mov	r0, r1
      break;
 80011ec:	4770      	bx	lr

    default:
      hexti->PendingCallback = NULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	6043      	str	r3, [r0, #4]
      status = HAL_ERROR;
 80011f2:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80011f4:	4770      	bx	lr

080011f6 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80011f6:	b110      	cbz	r0, 80011fe <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80011f8:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80011fa:	2000      	movs	r0, #0
 80011fc:	4770      	bx	lr
    return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
  }
}
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001208:	4a64      	ldr	r2, [pc, #400]	; (800139c <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0U)
 800120a:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80013a4 <HAL_GPIO_Init+0x1a0>
{
 8001212:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 8001214:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001216:	fa38 f403 	lsrs.w	r4, r8, r3
 800121a:	d102      	bne.n	8001222 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 800121c:	b005      	add	sp, #20
 800121e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001222:	2401      	movs	r4, #1
 8001224:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001226:	ea14 0608 	ands.w	r6, r4, r8
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800122a:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 800122c:	f000 80aa 	beq.w	8001384 <HAL_GPIO_Init+0x180>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001230:	684c      	ldr	r4, [r1, #4]
 8001232:	f024 0a10 	bic.w	sl, r4, #16
 8001236:	f1ba 0f02 	cmp.w	sl, #2
 800123a:	d116      	bne.n	800126a <HAL_GPIO_Init+0x66>
        temp = GPIOx->AFR[position >> 3U];
 800123c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001240:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001244:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001248:	f8de 5020 	ldr.w	r5, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800124c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001250:	f04f 0c0f 	mov.w	ip, #15
 8001254:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001258:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800125c:	690d      	ldr	r5, [r1, #16]
 800125e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001262:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	f8ce 5020 	str.w	r5, [lr, #32]
 800126a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800126e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001270:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001274:	fa05 f50e 	lsl.w	r5, r5, lr
 8001278:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800127e:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001282:	fa0c fc0e 	lsl.w	ip, ip, lr
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001286:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128e:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001292:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001296:	d816      	bhi.n	80012c6 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR;
 8001298:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129c:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800129e:	ea05 0c0c 	and.w	ip, r5, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	fa07 fa0e 	lsl.w	sl, r7, lr
 80012a6:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 80012aa:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 80012ae:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	9f01      	ldr	r7, [sp, #4]
 80012b4:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b8:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 80012bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80012c0:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 80012c4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80012c6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ca:	688f      	ldr	r7, [r1, #8]
 80012cc:	fa07 f70e 	lsl.w	r7, r7, lr
 80012d0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80012d2:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d4:	00e5      	lsls	r5, r4, #3
 80012d6:	d555      	bpl.n	8001384 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80012dc:	f045 0501 	orr.w	r5, r5, #1
 80012e0:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80012e4:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80012e8:	f023 0703 	bic.w	r7, r3, #3
 80012ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012f0:	f005 0501 	and.w	r5, r5, #1
 80012f4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80012f8:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012fa:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001300:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001302:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001306:	f04f 0c0f 	mov.w	ip, #15
 800130a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800130e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001312:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001316:	d037      	beq.n	8001388 <HAL_GPIO_Init+0x184>
 8001318:	4d21      	ldr	r5, [pc, #132]	; (80013a0 <HAL_GPIO_Init+0x19c>)
 800131a:	42a8      	cmp	r0, r5
 800131c:	d036      	beq.n	800138c <HAL_GPIO_Init+0x188>
 800131e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001322:	42a8      	cmp	r0, r5
 8001324:	d034      	beq.n	8001390 <HAL_GPIO_Init+0x18c>
 8001326:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800132a:	42a8      	cmp	r0, r5
 800132c:	d032      	beq.n	8001394 <HAL_GPIO_Init+0x190>
 800132e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001332:	42a8      	cmp	r0, r5
 8001334:	d030      	beq.n	8001398 <HAL_GPIO_Init+0x194>
 8001336:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800133a:	42a8      	cmp	r0, r5
 800133c:	bf14      	ite	ne
 800133e:	2506      	movne	r5, #6
 8001340:	2505      	moveq	r5, #5
 8001342:	fa05 f50e 	lsl.w	r5, r5, lr
 8001346:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 800134c:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 800134e:	43f7      	mvns	r7, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001350:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001354:	bf0c      	ite	eq
 8001356:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001358:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 800135a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 800135c:	6855      	ldr	r5, [r2, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001362:	bf0c      	ite	eq
 8001364:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001366:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 8001368:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 800136a:	6895      	ldr	r5, [r2, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001370:	bf0c      	ite	eq
 8001372:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001374:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8001376:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 8001378:	68d5      	ldr	r5, [r2, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800137a:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800137c:	bf54      	ite	pl
 800137e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001380:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8001382:	60d5      	str	r5, [r2, #12]
    position++;
 8001384:	3301      	adds	r3, #1
 8001386:	e746      	b.n	8001216 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001388:	2500      	movs	r5, #0
 800138a:	e7da      	b.n	8001342 <HAL_GPIO_Init+0x13e>
 800138c:	2501      	movs	r5, #1
 800138e:	e7d8      	b.n	8001342 <HAL_GPIO_Init+0x13e>
 8001390:	2502      	movs	r5, #2
 8001392:	e7d6      	b.n	8001342 <HAL_GPIO_Init+0x13e>
 8001394:	2503      	movs	r5, #3
 8001396:	e7d4      	b.n	8001342 <HAL_GPIO_Init+0x13e>
 8001398:	2504      	movs	r5, #4
 800139a:	e7d2      	b.n	8001342 <HAL_GPIO_Init+0x13e>
 800139c:	40010400 	.word	0x40010400
 80013a0:	48000400 	.word	0x48000400
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	b10a      	cbz	r2, 80013ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	6181      	str	r1, [r0, #24]
 80013ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ae:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80013b0:	4770      	bx	lr

080013b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013b2:	6943      	ldr	r3, [r0, #20]
 80013b4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	bf14      	ite	ne
 80013b8:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ba:	6181      	streq	r1, [r0, #24]
  }
}
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80013c4:	6959      	ldr	r1, [r3, #20]
 80013c6:	4201      	tst	r1, r0
 80013c8:	d002      	beq.n	80013d0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013cc:	f7fe ff4e 	bl	800026c <HAL_GPIO_EXTI_Callback>
  }
}
 80013d0:	bd08      	pop	{r3, pc}
 80013d2:	bf00      	nop
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013da:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013dc:	bb28      	cbnz	r0, 800142a <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013de:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80013e2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80013ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013f2:	d119      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80013fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013fe:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001400:	4a20      	ldr	r2, [pc, #128]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001402:	6811      	ldr	r1, [r2, #0]
 8001404:	2232      	movs	r2, #50	; 0x32
 8001406:	434a      	muls	r2, r1
 8001408:	491f      	ldr	r1, [pc, #124]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800140a:	fbb2 f2f1 	udiv	r2, r2, r1
 800140e:	4619      	mov	r1, r3
 8001410:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001412:	6958      	ldr	r0, [r3, #20]
 8001414:	0540      	lsls	r0, r0, #21
 8001416:	d500      	bpl.n	800141a <HAL_PWREx_ControlVoltageScaling+0x42>
 8001418:	b922      	cbnz	r2, 8001424 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800141a:	694b      	ldr	r3, [r1, #20]
 800141c:	055b      	lsls	r3, r3, #21
 800141e:	d52d      	bpl.n	800147c <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8001420:	2003      	movs	r0, #3
 8001422:	4770      	bx	lr
        wait_loop_index--;
 8001424:	3a01      	subs	r2, #1
 8001426:	e7f4      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001428:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800142e:	d120      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001430:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8001434:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001438:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800143c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001444:	d11a      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800144c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001450:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	2232      	movs	r2, #50	; 0x32
 8001458:	434a      	muls	r2, r1
 800145a:	490b      	ldr	r1, [pc, #44]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800145c:	fbb2 f2f1 	udiv	r2, r2, r1
 8001460:	4619      	mov	r1, r3
 8001462:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001464:	6958      	ldr	r0, [r3, #20]
 8001466:	0540      	lsls	r0, r0, #21
 8001468:	d5d7      	bpl.n	800141a <HAL_PWREx_ControlVoltageScaling+0x42>
 800146a:	2a00      	cmp	r2, #0
 800146c:	d0d5      	beq.n	800141a <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 800146e:	3a01      	subs	r2, #1
 8001470:	e7f8      	b.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001472:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800147a:	601a      	str	r2, [r3, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800147c:	2000      	movs	r0, #0
}
 800147e:	4770      	bx	lr
 8001480:	40007000 	.word	0x40007000
 8001484:	20000078 	.word	0x20000078
 8001488:	000f4240 	.word	0x000f4240

0800148c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001490:	4604      	mov	r4, r0
 8001492:	b908      	cbnz	r0, 8001498 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001494:	2001      	movs	r0, #1
 8001496:	e03f      	b.n	8001518 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001498:	6803      	ldr	r3, [r0, #0]
 800149a:	07df      	lsls	r7, r3, #31
 800149c:	d414      	bmi.n	80014c8 <HAL_RCC_OscConfig+0x3c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	079e      	lsls	r6, r3, #30
 80014a2:	d45a      	bmi.n	800155a <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	071e      	lsls	r6, r3, #28
 80014a8:	f100 80a3 	bmi.w	80015f2 <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	075d      	lsls	r5, r3, #29
 80014b0:	f100 80ca 	bmi.w	8001648 <HAL_RCC_OscConfig+0x1bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	069b      	lsls	r3, r3, #26
 80014b8:	f100 8131 	bmi.w	800171e <HAL_RCC_OscConfig+0x292>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014bc:	69e0      	ldr	r0, [r4, #28]
 80014be:	2800      	cmp	r0, #0
 80014c0:	f040 815e 	bne.w	8001780 <HAL_RCC_OscConfig+0x2f4>
      }
    }
  }
  }

  return HAL_OK;
 80014c4:	2000      	movs	r0, #0
 80014c6:	e027      	b.n	8001518 <HAL_RCC_OscConfig+0x8c>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c8:	4daa      	ldr	r5, [pc, #680]	; (8001774 <HAL_RCC_OscConfig+0x2e8>)
 80014ca:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014cc:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d10a      	bne.n	80014ec <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d6:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d108      	bne.n	80014f0 <HAL_RCC_OscConfig+0x64>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	039d      	lsls	r5, r3, #14
 80014e2:	d5dc      	bpl.n	800149e <HAL_RCC_OscConfig+0x12>
 80014e4:	6863      	ldr	r3, [r4, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1d9      	bne.n	800149e <HAL_RCC_OscConfig+0x12>
 80014ea:	e7d3      	b.n	8001494 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	e7f5      	b.n	80014dc <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	6863      	ldr	r3, [r4, #4]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d112      	bne.n	800151e <HAL_RCC_OscConfig+0x92>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001500:	f7ff f9b4 	bl	800086c <HAL_GetTick>
 8001504:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	0398      	lsls	r0, r3, #14
 800150a:	d4c8      	bmi.n	800149e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff f9ae 	bl	800086c <HAL_GetTick>
 8001510:	1b80      	subs	r0, r0, r6
 8001512:	2864      	cmp	r0, #100	; 0x64
 8001514:	d9f7      	bls.n	8001506 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001516:	2003      	movs	r0, #3
}
 8001518:	b002      	add	sp, #8
 800151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001522:	d104      	bne.n	800152e <HAL_RCC_OscConfig+0xa2>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152a:	602b      	str	r3, [r5, #0]
 800152c:	e7e4      	b.n	80014f8 <HAL_RCC_OscConfig+0x6c>
 800152e:	682a      	ldr	r2, [r5, #0]
 8001530:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001534:	602a      	str	r2, [r5, #0]
 8001536:	682a      	ldr	r2, [r5, #0]
 8001538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800153c:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1de      	bne.n	8001500 <HAL_RCC_OscConfig+0x74>
        tickstart = HAL_GetTick();
 8001542:	f7ff f993 	bl	800086c <HAL_GetTick>
 8001546:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	0399      	lsls	r1, r3, #14
 800154c:	d5a7      	bpl.n	800149e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154e:	f7ff f98d 	bl	800086c <HAL_GetTick>
 8001552:	1b80      	subs	r0, r0, r6
 8001554:	2864      	cmp	r0, #100	; 0x64
 8001556:	d9f7      	bls.n	8001548 <HAL_RCC_OscConfig+0xbc>
 8001558:	e7dd      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155a:	4d86      	ldr	r5, [pc, #536]	; (8001774 <HAL_RCC_OscConfig+0x2e8>)
 800155c:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800155e:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001560:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001564:	2b0c      	cmp	r3, #12
 8001566:	d117      	bne.n	8001598 <HAL_RCC_OscConfig+0x10c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001568:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800156c:	2b02      	cmp	r3, #2
 800156e:	d115      	bne.n	800159c <HAL_RCC_OscConfig+0x110>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	055a      	lsls	r2, r3, #21
 8001574:	d502      	bpl.n	800157c <HAL_RCC_OscConfig+0xf0>
 8001576:	68e3      	ldr	r3, [r4, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d08b      	beq.n	8001494 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	686b      	ldr	r3, [r5, #4]
 800157e:	6922      	ldr	r2, [r4, #16]
 8001580:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001584:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001588:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x2ec>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	f7ff f92d 	bl	80007ec <HAL_InitTick>
 8001592:	2800      	cmp	r0, #0
 8001594:	d086      	beq.n	80014a4 <HAL_RCC_OscConfig+0x18>
 8001596:	e77d      	b.n	8001494 <HAL_RCC_OscConfig+0x8>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001598:	2b04      	cmp	r3, #4
 800159a:	e7e8      	b.n	800156e <HAL_RCC_OscConfig+0xe2>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159c:	68e3      	ldr	r3, [r4, #12]
 800159e:	b1bb      	cbz	r3, 80015d0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_ENABLE();
 80015a0:	682b      	ldr	r3, [r5, #0]
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015a8:	f7ff f960 	bl	800086c <HAL_GetTick>
 80015ac:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	055b      	lsls	r3, r3, #21
 80015b2:	d507      	bpl.n	80015c4 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	686b      	ldr	r3, [r5, #4]
 80015b6:	6922      	ldr	r2, [r4, #16]
 80015b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80015bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015c0:	606b      	str	r3, [r5, #4]
 80015c2:	e76f      	b.n	80014a4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff f952 	bl	800086c <HAL_GetTick>
 80015c8:	1b80      	subs	r0, r0, r6
 80015ca:	2802      	cmp	r0, #2
 80015cc:	d9ef      	bls.n	80015ae <HAL_RCC_OscConfig+0x122>
 80015ce:	e7a2      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015d8:	f7ff f948 	bl	800086c <HAL_GetTick>
 80015dc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	055f      	lsls	r7, r3, #21
 80015e2:	f57f af5f 	bpl.w	80014a4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff f941 	bl	800086c <HAL_GetTick>
 80015ea:	1b80      	subs	r0, r0, r6
 80015ec:	2802      	cmp	r0, #2
 80015ee:	d9f6      	bls.n	80015de <HAL_RCC_OscConfig+0x152>
 80015f0:	e791      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f2:	6963      	ldr	r3, [r4, #20]
 80015f4:	4d5f      	ldr	r5, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x2e8>)
 80015f6:	b19b      	cbz	r3, 8001620 <HAL_RCC_OscConfig+0x194>
      __HAL_RCC_LSI_ENABLE();
 80015f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001604:	f7ff f932 	bl	800086c <HAL_GetTick>
 8001608:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800160e:	0798      	lsls	r0, r3, #30
 8001610:	f53f af4c 	bmi.w	80014ac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f92a 	bl	800086c <HAL_GetTick>
 8001618:	1b80      	subs	r0, r0, r6
 800161a:	2802      	cmp	r0, #2
 800161c:	d9f5      	bls.n	800160a <HAL_RCC_OscConfig+0x17e>
 800161e:	e77a      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001620:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800162c:	f7ff f91e 	bl	800086c <HAL_GetTick>
 8001630:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001632:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001636:	0799      	lsls	r1, r3, #30
 8001638:	f57f af38 	bpl.w	80014ac <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f916 	bl	800086c <HAL_GetTick>
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	2802      	cmp	r0, #2
 8001644:	d9f5      	bls.n	8001632 <HAL_RCC_OscConfig+0x1a6>
 8001646:	e766      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001648:	4d4a      	ldr	r5, [pc, #296]	; (8001774 <HAL_RCC_OscConfig+0x2e8>)
 800164a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800164c:	00da      	lsls	r2, r3, #3
 800164e:	d427      	bmi.n	80016a0 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001656:	65ab      	str	r3, [r5, #88]	; 0x58
 8001658:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001662:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001664:	4e45      	ldr	r6, [pc, #276]	; (800177c <HAL_RCC_OscConfig+0x2f0>)
 8001666:	6833      	ldr	r3, [r6, #0]
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	d51b      	bpl.n	80016a4 <HAL_RCC_OscConfig+0x218>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	68a3      	ldr	r3, [r4, #8]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d129      	bne.n	80016c6 <HAL_RCC_OscConfig+0x23a>
 8001672:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 800167e:	f7ff f8f5 	bl	800086c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001686:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001688:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800168c:	0799      	lsls	r1, r3, #30
 800168e:	d540      	bpl.n	8001712 <HAL_RCC_OscConfig+0x286>
    if (pwrclkchanged == SET)
 8001690:	2f00      	cmp	r7, #0
 8001692:	f43f af0f 	beq.w	80014b4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001696:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800169c:	65ab      	str	r3, [r5, #88]	; 0x58
 800169e:	e709      	b.n	80014b4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80016a0:	2700      	movs	r7, #0
 80016a2:	e7df      	b.n	8001664 <HAL_RCC_OscConfig+0x1d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a4:	6833      	ldr	r3, [r6, #0]
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016ac:	f7ff f8de 	bl	800086c <HAL_GetTick>
 80016b0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	6833      	ldr	r3, [r6, #0]
 80016b4:	05d8      	lsls	r0, r3, #23
 80016b6:	d4d9      	bmi.n	800166c <HAL_RCC_OscConfig+0x1e0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7ff f8d8 	bl	800086c <HAL_GetTick>
 80016bc:	eba0 0008 	sub.w	r0, r0, r8
 80016c0:	2802      	cmp	r0, #2
 80016c2:	d9f6      	bls.n	80016b2 <HAL_RCC_OscConfig+0x226>
 80016c4:	e727      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x24c>
 80016ca:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80016d6:	e7cc      	b.n	8001672 <HAL_RCC_OscConfig+0x1e6>
 80016d8:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 80016e4:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 80016e8:	f022 0204 	bic.w	r2, r2, #4
 80016ec:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1c4      	bne.n	800167e <HAL_RCC_OscConfig+0x1f2>
      tickstart = HAL_GetTick();
 80016f4:	f7ff f8ba 	bl	800086c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016fc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001702:	079a      	lsls	r2, r3, #30
 8001704:	d5c4      	bpl.n	8001690 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff f8b1 	bl	800086c <HAL_GetTick>
 800170a:	1b80      	subs	r0, r0, r6
 800170c:	4540      	cmp	r0, r8
 800170e:	d9f6      	bls.n	80016fe <HAL_RCC_OscConfig+0x272>
 8001710:	e701      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff f8ab 	bl	800086c <HAL_GetTick>
 8001716:	1b80      	subs	r0, r0, r6
 8001718:	4540      	cmp	r0, r8
 800171a:	d9b5      	bls.n	8001688 <HAL_RCC_OscConfig+0x1fc>
 800171c:	e6fb      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800171e:	69a3      	ldr	r3, [r4, #24]
 8001720:	4d14      	ldr	r5, [pc, #80]	; (8001774 <HAL_RCC_OscConfig+0x2e8>)
 8001722:	b19b      	cbz	r3, 800174c <HAL_RCC_OscConfig+0x2c0>
      __HAL_RCC_HSI48_ENABLE();
 8001724:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001730:	f7ff f89c 	bl	800086c <HAL_GetTick>
 8001734:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001736:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800173a:	079f      	lsls	r7, r3, #30
 800173c:	f53f aebe 	bmi.w	80014bc <HAL_RCC_OscConfig+0x30>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001740:	f7ff f894 	bl	800086c <HAL_GetTick>
 8001744:	1b80      	subs	r0, r0, r6
 8001746:	2802      	cmp	r0, #2
 8001748:	d9f5      	bls.n	8001736 <HAL_RCC_OscConfig+0x2aa>
 800174a:	e6e4      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSI48_DISABLE();
 800174c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001758:	f7ff f888 	bl	800086c <HAL_GetTick>
 800175c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800175e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001762:	0798      	lsls	r0, r3, #30
 8001764:	f57f aeaa 	bpl.w	80014bc <HAL_RCC_OscConfig+0x30>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001768:	f7ff f880 	bl	800086c <HAL_GetTick>
 800176c:	1b80      	subs	r0, r0, r6
 800176e:	2802      	cmp	r0, #2
 8001770:	d9f5      	bls.n	800175e <HAL_RCC_OscConfig+0x2d2>
 8001772:	e6d0      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
 8001774:	40021000 	.word	0x40021000
 8001778:	20000080 	.word	0x20000080
 800177c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001780:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <HAL_RCC_OscConfig+0x41c>)
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	f002 020c 	and.w	r2, r2, #12
 8001788:	2a0c      	cmp	r2, #12
 800178a:	461d      	mov	r5, r3
 800178c:	d057      	beq.n	800183e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_DISABLE();
 800178e:	681b      	ldr	r3, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001790:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001796:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001798:	d13a      	bne.n	8001810 <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 800179a:	f7ff f867 	bl	800086c <HAL_GetTick>
 800179e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	0199      	lsls	r1, r3, #6
 80017a4:	d42e      	bmi.n	8001804 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a6:	68ea      	ldr	r2, [r5, #12]
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_RCC_OscConfig+0x420>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	6a22      	ldr	r2, [r4, #32]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017b8:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80017bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017be:	3a01      	subs	r2, #1
 80017c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80017c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017c6:	0852      	lsrs	r2, r2, #1
 80017c8:	3a01      	subs	r2, #1
 80017ca:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80017ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80017d0:	0852      	lsrs	r2, r2, #1
 80017d2:	3a01      	subs	r2, #1
 80017d4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80017d8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80017da:	682b      	ldr	r3, [r5, #0]
 80017dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e0:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e2:	68eb      	ldr	r3, [r5, #12]
 80017e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80017ea:	f7ff f83f 	bl	800086c <HAL_GetTick>
 80017ee:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f0:	682b      	ldr	r3, [r5, #0]
 80017f2:	019a      	lsls	r2, r3, #6
 80017f4:	f53f ae66 	bmi.w	80014c4 <HAL_RCC_OscConfig+0x38>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f838 	bl	800086c <HAL_GetTick>
 80017fc:	1b00      	subs	r0, r0, r4
 80017fe:	2802      	cmp	r0, #2
 8001800:	d9f6      	bls.n	80017f0 <HAL_RCC_OscConfig+0x364>
 8001802:	e688      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff f832 	bl	800086c <HAL_GetTick>
 8001808:	1b80      	subs	r0, r0, r6
 800180a:	2802      	cmp	r0, #2
 800180c:	d9c8      	bls.n	80017a0 <HAL_RCC_OscConfig+0x314>
 800180e:	e682      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001810:	68eb      	ldr	r3, [r5, #12]
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001818:	68eb      	ldr	r3, [r5, #12]
 800181a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001824:	f7ff f822 	bl	800086c <HAL_GetTick>
 8001828:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	019b      	lsls	r3, r3, #6
 800182e:	f57f ae49 	bpl.w	80014c4 <HAL_RCC_OscConfig+0x38>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff f81b 	bl	800086c <HAL_GetTick>
 8001836:	1b00      	subs	r0, r0, r4
 8001838:	2802      	cmp	r0, #2
 800183a:	d9f6      	bls.n	800182a <HAL_RCC_OscConfig+0x39e>
 800183c:	e66b      	b.n	8001516 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183e:	2801      	cmp	r0, #1
 8001840:	f43f ae6a 	beq.w	8001518 <HAL_RCC_OscConfig+0x8c>
      temp_pllckcfg = RCC->PLLCFGR;
 8001844:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	6a22      	ldr	r2, [r4, #32]
 8001848:	f003 0103 	and.w	r1, r3, #3
 800184c:	4291      	cmp	r1, r2
 800184e:	f47f ae21 	bne.w	8001494 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001852:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001858:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800185e:	f47f ae19 	bne.w	8001494 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001862:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001864:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001868:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800186c:	f47f ae12 	bne.w	8001494 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001870:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001872:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001876:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800187a:	f47f ae0b 	bne.w	8001494 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001880:	0852      	lsrs	r2, r2, #1
 8001882:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001886:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001888:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800188c:	f47f ae02 	bne.w	8001494 <HAL_RCC_OscConfig+0x8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001890:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001892:	0852      	lsrs	r2, r2, #1
 8001894:	3a01      	subs	r2, #1
 8001896:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800189e:	bf14      	ite	ne
 80018a0:	2001      	movne	r0, #1
 80018a2:	2000      	moveq	r0, #0
 80018a4:	e638      	b.n	8001518 <HAL_RCC_OscConfig+0x8c>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	019f800c 	.word	0x019f800c

080018b0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_RCC_GetSysClockFreq+0x64>)
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	f002 020c 	and.w	r2, r2, #12
 80018b8:	2a04      	cmp	r2, #4
 80018ba:	d025      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	f002 020c 	and.w	r2, r2, #12
 80018c2:	2a08      	cmp	r2, #8
 80018c4:	d022      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	f002 020c 	and.w	r2, r2, #12
 80018cc:	2a0c      	cmp	r2, #12
 80018ce:	d11f      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0x60>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018d0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018d2:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018d4:	f001 0103 	and.w	r1, r1, #3

    switch (pllsource)
 80018d8:	2903      	cmp	r1, #3
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018da:	68d9      	ldr	r1, [r3, #12]
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018e2:	f3c0 1003 	ubfx	r0, r0, #4, #4
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e6:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ea:	f103 0301 	add.w	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ee:	f100 0201 	add.w	r2, r0, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018f6:	bf0c      	ite	eq
 80018f8:	4807      	ldreq	r0, [pc, #28]	; (8001918 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018fa:	4808      	ldrne	r0, [pc, #32]	; (800191c <HAL_RCC_GetSysClockFreq+0x6c>)
 80018fc:	fbb0 f0f2 	udiv	r0, r0, r2
 8001900:	4348      	muls	r0, r1
    sysclockfreq = pllvco/pllr;
 8001902:	fbb0 f0f3 	udiv	r0, r0, r3
 8001906:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <HAL_RCC_GetSysClockFreq+0x6c>)
 800190a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <HAL_RCC_GetSysClockFreq+0x68>)
 800190e:	4770      	bx	lr
  }
  else
  {
    sysclockfreq = 0U;
 8001910:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000
 8001918:	016e3600 	.word	0x016e3600
 800191c:	00f42400 	.word	0x00f42400

08001920 <HAL_RCC_ClockConfig>:
{
 8001920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001924:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001926:	4606      	mov	r6, r0
 8001928:	b910      	cbnz	r0, 8001930 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800192a:	2001      	movs	r0, #1
}
 800192c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4a6d      	ldr	r2, [pc, #436]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	428b      	cmp	r3, r1
 800193a:	d345      	bcc.n	80019c8 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193c:	6831      	ldr	r1, [r6, #0]
 800193e:	f011 0701 	ands.w	r7, r1, #1
 8001942:	d14c      	bne.n	80019de <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	6832      	ldr	r2, [r6, #0]
 8001946:	0791      	lsls	r1, r2, #30
 8001948:	f140 80a8 	bpl.w	8001a9c <HAL_RCC_ClockConfig+0x17c>
 800194c:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_ClockConfig+0x1cc>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194e:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001952:	bf1e      	ittt	ne
 8001954:	6899      	ldrne	r1, [r3, #8]
 8001956:	f441 61e0 	orrne.w	r1, r1, #1792	; 0x700
 800195a:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195c:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800195e:	bf41      	itttt	mi
 8001960:	689a      	ldrmi	r2, [r3, #8]
 8001962:	f422 527c 	bicmi.w	r2, r2, #16128	; 0x3f00
 8001966:	f442 62e0 	orrmi.w	r2, r2, #1792	; 0x700
 800196a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	68b1      	ldr	r1, [r6, #8]
 8001970:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4c5b      	ldr	r4, [pc, #364]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	42ab      	cmp	r3, r5
 8001982:	f200 8094 	bhi.w	8001aae <HAL_RCC_ClockConfig+0x18e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001986:	6832      	ldr	r2, [r6, #0]
 8001988:	4c58      	ldr	r4, [pc, #352]	; (8001aec <HAL_RCC_ClockConfig+0x1cc>)
 800198a:	f012 0f04 	tst.w	r2, #4
 800198e:	f040 80a4 	bne.w	8001ada <HAL_RCC_ClockConfig+0x1ba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	0713      	lsls	r3, r2, #28
 8001994:	d506      	bpl.n	80019a4 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001996:	68a3      	ldr	r3, [r4, #8]
 8001998:	6932      	ldr	r2, [r6, #16]
 800199a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800199e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019a2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a4:	f7ff ff84 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 80019a8:	68a3      	ldr	r3, [r4, #8]
 80019aa:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_RCC_ClockConfig+0x1d0>)
 80019ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	40d8      	lsrs	r0, r3
 80019b8:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <HAL_RCC_ClockConfig+0x1d4>)
 80019ba:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80019bc:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <HAL_RCC_ClockConfig+0x1d8>)
 80019be:	6818      	ldr	r0, [r3, #0]
}
 80019c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80019c4:	f7fe bf12 	b.w	80007ec <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	f023 030f 	bic.w	r3, r3, #15
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	428b      	cmp	r3, r1
 80019da:	d1a6      	bne.n	800192a <HAL_RCC_ClockConfig+0xa>
 80019dc:	e7ae      	b.n	800193c <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019de:	6873      	ldr	r3, [r6, #4]
 80019e0:	4c42      	ldr	r4, [pc, #264]	; (8001aec <HAL_RCC_ClockConfig+0x1cc>)
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d14a      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	019f      	lsls	r7, r3, #6
 80019ea:	d59e      	bpl.n	800192a <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ec:	68e0      	ldr	r0, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019ee:	68e3      	ldr	r3, [r4, #12]
 80019f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019f4:	1c5a      	adds	r2, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019f6:	f000 0303 	and.w	r3, r0, #3

  switch (pllsource)
 80019fa:	2b03      	cmp	r3, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019fc:	68e0      	ldr	r0, [r4, #12]
 80019fe:	bf0c      	ite	eq
 8001a00:	4b3e      	ldreq	r3, [pc, #248]	; (8001afc <HAL_RCC_ClockConfig+0x1dc>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a02:	4b3f      	ldrne	r3, [pc, #252]	; (8001b00 <HAL_RCC_ClockConfig+0x1e0>)
 8001a04:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a08:	68e2      	ldr	r2, [r4, #12]
 8001a0a:	f3c2 6241 	ubfx	r2, r2, #25, #2
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a0e:	f3c0 2006 	ubfx	r0, r0, #8, #7
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a12:	3201      	adds	r2, #1
 8001a14:	0052      	lsls	r2, r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a16:	4343      	muls	r3, r0
  sysclockfreq = pllvco/pllr;
 8001a18:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8001a1c:	4a39      	ldr	r2, [pc, #228]	; (8001b04 <HAL_RCC_ClockConfig+0x1e4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d81b      	bhi.n	8001a5a <HAL_RCC_ClockConfig+0x13a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a22:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a24:	68a3      	ldr	r3, [r4, #8]
 8001a26:	6872      	ldr	r2, [r6, #4]
 8001a28:	f023 0303 	bic.w	r3, r3, #3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001a30:	f7fe ff1c 	bl	800086c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a38:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	68a3      	ldr	r3, [r4, #8]
 8001a3c:	6872      	ldr	r2, [r6, #4]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a46:	f43f af7d 	beq.w	8001944 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7fe ff0f 	bl	800086c <HAL_GetTick>
 8001a4e:	eba0 0008 	sub.w	r0, r0, r8
 8001a52:	4548      	cmp	r0, r9
 8001a54:	d9f1      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 8001a56:	2003      	movs	r0, #3
 8001a58:	e768      	b.n	800192c <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a5a:	68a3      	ldr	r3, [r4, #8]
 8001a5c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8001a60:	d004      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x14c>
 8001a62:	0788      	lsls	r0, r1, #30
 8001a64:	d5dd      	bpl.n	8001a22 <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a66:	68b3      	ldr	r3, [r6, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1da      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a6c:	68a3      	ldr	r3, [r4, #8]
 8001a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a78:	2780      	movs	r7, #128	; 0x80
 8001a7a:	e7d3      	b.n	8001a24 <HAL_RCC_ClockConfig+0x104>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7c:	2b02      	cmp	r3, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	6823      	ldr	r3, [r4, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a86:	f43f af50 	beq.w	800192a <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a8a:	f7ff ff11 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_RCC_ClockConfig+0x1e4>)
 8001a90:	4298      	cmp	r0, r3
 8001a92:	d9c6      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x102>
 8001a94:	e7ea      	b.n	8001a6c <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a96:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a9a:	e7f4      	b.n	8001a86 <HAL_RCC_ClockConfig+0x166>
    if(hpre == RCC_SYSCLK_DIV2)
 8001a9c:	2f00      	cmp	r7, #0
 8001a9e:	f43f af6b 	beq.w	8001978 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <HAL_RCC_ClockConfig+0x1cc>)
 8001aa4:	6893      	ldr	r3, [r2, #8]
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aaa:	6093      	str	r3, [r2, #8]
 8001aac:	e764      	b.n	8001978 <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	f023 030f 	bic.w	r3, r3, #15
 8001ab4:	432b      	orrs	r3, r5
 8001ab6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001ab8:	f7fe fed8 	bl	800086c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001ac0:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	42ab      	cmp	r3, r5
 8001aca:	f43f af5c 	beq.w	8001986 <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ace:	f7fe fecd 	bl	800086c <HAL_GetTick>
 8001ad2:	1bc0      	subs	r0, r0, r7
 8001ad4:	4540      	cmp	r0, r8
 8001ad6:	d9f4      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x1a2>
 8001ad8:	e7bd      	b.n	8001a56 <HAL_RCC_ClockConfig+0x136>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ada:	68a3      	ldr	r3, [r4, #8]
 8001adc:	68f1      	ldr	r1, [r6, #12]
 8001ade:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	60a3      	str	r3, [r4, #8]
 8001ae6:	e754      	b.n	8001992 <HAL_RCC_ClockConfig+0x72>
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08001eec 	.word	0x08001eec
 8001af4:	20000078 	.word	0x20000078
 8001af8:	20000080 	.word	0x20000080
 8001afc:	016e3600 	.word	0x016e3600
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	04c4b400 	.word	0x04c4b400

08001b08 <HAL_RCC_GetHCLKFreq>:
}
 8001b08:	4b01      	ldr	r3, [pc, #4]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000078 	.word	0x20000078

08001b14 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b14:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b16:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b1c:	6891      	ldr	r1, [r2, #8]
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_TIM_Base_Start+0x2c>)
 8001b20:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d006      	beq.n	8001b34 <HAL_TIM_Base_Start+0x20>
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8001b2a:	bf1e      	ittt	ne
 8001b2c:	6813      	ldrne	r3, [r2, #0]
 8001b2e:	f043 0301 	orrne.w	r3, r3, #1
 8001b32:	6013      	strne	r3, [r2, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	00010007 	.word	0x00010007

08001b44 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b4a:	6803      	ldr	r3, [r0, #0]
 8001b4c:	6a19      	ldr	r1, [r3, #32]
 8001b4e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001b52:	4211      	tst	r1, r2
 8001b54:	d108      	bne.n	8001b68 <HAL_TIM_Base_Stop+0x24>
 8001b56:	6a19      	ldr	r1, [r3, #32]
 8001b58:	f244 4244 	movw	r2, #17476	; 0x4444
 8001b5c:	4211      	tst	r1, r2
 8001b5e:	bf02      	ittt	eq
 8001b60:	681a      	ldreq	r2, [r3, #0]
 8001b62:	f022 0201 	biceq.w	r2, r2, #1
 8001b66:	601a      	streq	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001b6e:	2000      	movs	r0, #0
 8001b70:	4770      	bx	lr
	...

08001b74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b74:	4a36      	ldr	r2, [pc, #216]	; (8001c50 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8001b76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b78:	4290      	cmp	r0, r2
 8001b7a:	d016      	beq.n	8001baa <TIM_Base_SetConfig+0x36>
 8001b7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b80:	d013      	beq.n	8001baa <TIM_Base_SetConfig+0x36>
 8001b82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b86:	4290      	cmp	r0, r2
 8001b88:	d00f      	beq.n	8001baa <TIM_Base_SetConfig+0x36>
 8001b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b8e:	4290      	cmp	r0, r2
 8001b90:	d00b      	beq.n	8001baa <TIM_Base_SetConfig+0x36>
 8001b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b96:	4290      	cmp	r0, r2
 8001b98:	d007      	beq.n	8001baa <TIM_Base_SetConfig+0x36>
 8001b9a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001b9e:	4290      	cmp	r0, r2
 8001ba0:	d003      	beq.n	8001baa <TIM_Base_SetConfig+0x36>
 8001ba2:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001ba6:	4290      	cmp	r0, r2
 8001ba8:	d119      	bne.n	8001bde <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001baa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bb0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bb2:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <TIM_Base_SetConfig+0xdc>)
 8001bb4:	4290      	cmp	r0, r2
 8001bb6:	d021      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bb8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bbc:	d01e      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bbe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001bc2:	4290      	cmp	r0, r2
 8001bc4:	d01a      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bca:	4290      	cmp	r0, r2
 8001bcc:	d016      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bd2:	4290      	cmp	r0, r2
 8001bd4:	d012      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bd6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001bda:	4290      	cmp	r0, r2
 8001bdc:	d00e      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <TIM_Base_SetConfig+0xe0>)
 8001be0:	4290      	cmp	r0, r2
 8001be2:	d00b      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001be8:	4290      	cmp	r0, r2
 8001bea:	d007      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bf0:	4290      	cmp	r0, r2
 8001bf2:	d003      	beq.n	8001bfc <TIM_Base_SetConfig+0x88>
 8001bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf8:	4290      	cmp	r0, r2
 8001bfa:	d103      	bne.n	8001c04 <TIM_Base_SetConfig+0x90>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bfc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c02:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c04:	694a      	ldr	r2, [r1, #20]
 8001c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c0a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001c0c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c0e:	688b      	ldr	r3, [r1, #8]
 8001c10:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c12:	680b      	ldr	r3, [r1, #0]
 8001c14:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <TIM_Base_SetConfig+0xdc>)
 8001c18:	4298      	cmp	r0, r3
 8001c1a:	d013      	beq.n	8001c44 <TIM_Base_SetConfig+0xd0>
 8001c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c20:	4298      	cmp	r0, r3
 8001c22:	d00f      	beq.n	8001c44 <TIM_Base_SetConfig+0xd0>
 8001c24:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001c28:	4298      	cmp	r0, r3
 8001c2a:	d00b      	beq.n	8001c44 <TIM_Base_SetConfig+0xd0>
 8001c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c30:	4298      	cmp	r0, r3
 8001c32:	d007      	beq.n	8001c44 <TIM_Base_SetConfig+0xd0>
 8001c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c38:	4298      	cmp	r0, r3
 8001c3a:	d003      	beq.n	8001c44 <TIM_Base_SetConfig+0xd0>
 8001c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c40:	4298      	cmp	r0, r3
 8001c42:	d101      	bne.n	8001c48 <TIM_Base_SetConfig+0xd4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c44:	690b      	ldr	r3, [r1, #16]
 8001c46:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	6143      	str	r3, [r0, #20]
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40014000 	.word	0x40014000

08001c58 <HAL_TIM_Base_Init>:
{
 8001c58:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	b1a0      	cbz	r0, 8001c88 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c66:	b91b      	cbnz	r3, 8001c70 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c6c:	f7fe fcf8 	bl	8000660 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	2302      	movs	r3, #2
 8001c72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c76:	6820      	ldr	r0, [r4, #0]
 8001c78:	1d21      	adds	r1, r4, #4
 8001c7a:	f7ff ff7b 	bl	8001b74 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c84:	2000      	movs	r0, #0
}
 8001c86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c88:	2001      	movs	r0, #1
 8001c8a:	e7fc      	b.n	8001c86 <HAL_TIM_Base_Init+0x2e>

08001c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c8c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c8e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c90:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c92:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c96:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001c9a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c9c:	6083      	str	r3, [r0, #8]
}
 8001c9e:	bd10      	pop	{r4, pc}

08001ca0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ca0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
{
 8001ca6:	b570      	push	{r4, r5, r6, lr}
 8001ca8:	4604      	mov	r4, r0
 8001caa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001cae:	d02a      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x66>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001cb4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001cbc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_TIM_ConfigClockSource+0x168>)
 8001cc0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001cc2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001cc4:	680b      	ldr	r3, [r1, #0]
 8001cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cca:	d046      	beq.n	8001d5a <HAL_TIM_ConfigClockSource+0xba>
 8001ccc:	d82b      	bhi.n	8001d26 <HAL_TIM_ConfigClockSource+0x86>
 8001cce:	2b30      	cmp	r3, #48	; 0x30
 8001cd0:	d005      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001cd2:	d80d      	bhi.n	8001cf0 <HAL_TIM_ConfigClockSource+0x50>
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d002      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d000      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001cdc:	b96b      	cbnz	r3, 8001cfa <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8001cde:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ce0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ce4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ce8:	f043 0307 	orr.w	r3, r3, #7
 8001cec:	4313      	orrs	r3, r2
 8001cee:	e056      	b.n	8001d9e <HAL_TIM_ConfigClockSource+0xfe>
  switch (sClockSourceConfig->ClockSource)
 8001cf0:	2b50      	cmp	r3, #80	; 0x50
 8001cf2:	d03c      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0xce>
 8001cf4:	d808      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x68>
 8001cf6:	2b40      	cmp	r3, #64	; 0x40
 8001cf8:	d06d      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x136>
  htim->State = HAL_TIM_STATE_READY;
 8001cfa:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001cfc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d02:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d08:	2b60      	cmp	r3, #96	; 0x60
 8001d0a:	d04a      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0x102>
 8001d0c:	2b70      	cmp	r3, #112	; 0x70
 8001d0e:	d1f4      	bne.n	8001cfa <HAL_TIM_ConfigClockSource+0x5a>
      TIM_ETR_SetConfig(htim->Instance,
 8001d10:	68cb      	ldr	r3, [r1, #12]
 8001d12:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001d16:	f7ff ffb9 	bl	8001c8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d22:	6093      	str	r3, [r2, #8]
      break;
 8001d24:	e7e9      	b.n	8001cfa <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001d26:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <HAL_TIM_ConfigClockSource+0x16c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d0d8      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001d2c:	d809      	bhi.n	8001d42 <HAL_TIM_ConfigClockSource+0xa2>
 8001d2e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8001d32:	d0d4      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001d34:	3a10      	subs	r2, #16
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d0d1      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d3e:	d1dc      	bne.n	8001cfa <HAL_TIM_ConfigClockSource+0x5a>
 8001d40:	e7cd      	b.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <HAL_TIM_ConfigClockSource+0x170>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d0ca      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001d48:	d802      	bhi.n	8001d50 <HAL_TIM_ConfigClockSource+0xb0>
 8001d4a:	3a10      	subs	r2, #16
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	e7f6      	b.n	8001d3e <HAL_TIM_ConfigClockSource+0x9e>
 8001d50:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <HAL_TIM_ConfigClockSource+0x174>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d0c3      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0x3e>
 8001d56:	3210      	adds	r2, #16
 8001d58:	e7f8      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0xac>
      TIM_ETR_SetConfig(htim->Instance,
 8001d5a:	68cb      	ldr	r3, [r1, #12]
 8001d5c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001d60:	f7ff ff94 	bl	8001c8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	6893      	ldr	r3, [r2, #8]
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	e7d9      	b.n	8001d22 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d6e:	684a      	ldr	r2, [r1, #4]
 8001d70:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d72:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d74:	6a05      	ldr	r5, [r0, #32]
 8001d76:	f025 0501 	bic.w	r5, r5, #1
 8001d7a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d7c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d7e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d86:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d8a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001d8c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d8e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001d90:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d92:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d9a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001d9e:	6083      	str	r3, [r0, #8]
 8001da0:	e7ab      	b.n	8001cfa <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001da2:	684d      	ldr	r5, [r1, #4]
 8001da4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001da6:	6a01      	ldr	r1, [r0, #32]
 8001da8:	f021 0110 	bic.w	r1, r1, #16
 8001dac:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dae:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001db0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001db2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001db6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dbe:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001dc2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001dc4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001dc6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dc8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dd0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001dd4:	e7e3      	b.n	8001d9e <HAL_TIM_ConfigClockSource+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd6:	684a      	ldr	r2, [r1, #4]
 8001dd8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dda:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ddc:	6a05      	ldr	r5, [r0, #32]
 8001dde:	f025 0501 	bic.w	r5, r5, #1
 8001de2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001de4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001de6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dee:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001df2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001df4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001df6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001df8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dfa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e02:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001e06:	e7ca      	b.n	8001d9e <HAL_TIM_ConfigClockSource+0xfe>
 8001e08:	ffce0088 	.word	0xffce0088
 8001e0c:	00100030 	.word	0x00100030
 8001e10:	00100050 	.word	0x00100050
 8001e14:	00100060 	.word	0x00100060

08001e18 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e1c:	2b01      	cmp	r3, #1
{
 8001e1e:	b530      	push	{r4, r5, lr}
 8001e20:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e24:	d025      	beq.n	8001e72 <HAL_TIMEx_MasterConfigSynchronization+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e26:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e28:	4d13      	ldr	r5, [pc, #76]	; (8001e78 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e2e:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8001e30:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001e32:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e34:	d007      	beq.n	8001e46 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8001e36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001e3a:	42aa      	cmp	r2, r5
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
 8001e3e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001e42:	42aa      	cmp	r2, r5
 8001e44:	d103      	bne.n	8001e4e <HAL_TIMEx_MasterConfigSynchronization+0x36>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e46:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001e48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e4c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e4e:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e50:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e5a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e5c:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e60:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e62:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e64:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8001e66:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001e68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e72:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e74:	bd30      	pop	{r4, r5, pc}
 8001e76:	bf00      	nop
 8001e78:	40012c00 	.word	0x40012c00

08001e7c <__libc_init_array>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	4e0d      	ldr	r6, [pc, #52]	; (8001eb4 <__libc_init_array+0x38>)
 8001e80:	4c0d      	ldr	r4, [pc, #52]	; (8001eb8 <__libc_init_array+0x3c>)
 8001e82:	1ba4      	subs	r4, r4, r6
 8001e84:	10a4      	asrs	r4, r4, #2
 8001e86:	2500      	movs	r5, #0
 8001e88:	42a5      	cmp	r5, r4
 8001e8a:	d109      	bne.n	8001ea0 <__libc_init_array+0x24>
 8001e8c:	4e0b      	ldr	r6, [pc, #44]	; (8001ebc <__libc_init_array+0x40>)
 8001e8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ec0 <__libc_init_array+0x44>)
 8001e90:	f000 f820 	bl	8001ed4 <_init>
 8001e94:	1ba4      	subs	r4, r4, r6
 8001e96:	10a4      	asrs	r4, r4, #2
 8001e98:	2500      	movs	r5, #0
 8001e9a:	42a5      	cmp	r5, r4
 8001e9c:	d105      	bne.n	8001eaa <__libc_init_array+0x2e>
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea4:	4798      	blx	r3
 8001ea6:	3501      	adds	r5, #1
 8001ea8:	e7ee      	b.n	8001e88 <__libc_init_array+0xc>
 8001eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eae:	4798      	blx	r3
 8001eb0:	3501      	adds	r5, #1
 8001eb2:	e7f2      	b.n	8001e9a <__libc_init_array+0x1e>
 8001eb4:	08001f04 	.word	0x08001f04
 8001eb8:	08001f04 	.word	0x08001f04
 8001ebc:	08001f04 	.word	0x08001f04
 8001ec0:	08001f08 	.word	0x08001f08

08001ec4 <memset>:
 8001ec4:	4402      	add	r2, r0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d100      	bne.n	8001ece <memset+0xa>
 8001ecc:	4770      	bx	lr
 8001ece:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed2:	e7f9      	b.n	8001ec8 <memset+0x4>

08001ed4 <_init>:
 8001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed6:	bf00      	nop
 8001ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eda:	bc08      	pop	{r3}
 8001edc:	469e      	mov	lr, r3
 8001ede:	4770      	bx	lr

08001ee0 <_fini>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr
